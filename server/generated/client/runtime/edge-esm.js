/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */
const sa = Object.create; const en = Object.defineProperty; const aa = Object.getOwnPropertyDescriptor; const la = Object.getOwnPropertyNames; const ua = Object.getPrototypeOf; const ca = Object.prototype.hasOwnProperty; const me = (e, t) => () => (e && (t = e(e = 0)), t); const Fe = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports); function ir(e, t) { for (const r in t)en(e, r, { get: t[r], enumerable: !0 }) } function pa(e, t, r, n) {
  if (t && typeof t == 'object' || typeof t == 'function') {
    for (const i of la(t))!ca.call(e, i) && i !== r && en(e, i, { get: () => t[i], enumerable: !(n = aa(t, i)) || n.enumerable })
  } return e
} const Qe = (e, t, r) => (r = e != null ? sa(ua(e)) : {}, pa(t || !e || !e.__esModule ? en(r, 'default', { value: e, enumerable: !0 }) : r, e)); let y; const u = me(() => { 'use strict'; y = { nextTick: (e, ...t) => { setTimeout(() => { e(...t) }, 0) }, env: {}, version: '', cwd: () => '/', stderr: {}, argv: ['/bin/node'] } }); let b; const c = me(() => { 'use strict'; b = globalThis.performance ?? (() => { const e = Date.now(); return { now: () => Date.now() - e } })() }); let E; const p = me(() => { 'use strict'; E = () => {}; E.prototype = E }); const m = me(() => { 'use strict' }); const Ei = Fe((Ke) => {
  'use strict'; f(); u(); c(); p(); m(); const oi = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports); const ma = oi((e) => {
    'use strict'; e.byteLength = l, e.toByteArray = g, e.fromByteArray = S; const t = []; const r = []; const n = typeof Uint8Array < 'u' ? Uint8Array : Array; const i = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; for (o = 0, s = i.length; o < s; ++o)t[o] = i[o], r[i.charCodeAt(o)] = o; let o, s; r[45] = 62, r[95] = 63; function a(A) {
      const R = A.length; if (R % 4 > 0)
        throw new Error('Invalid string. Length must be a multiple of 4'); let D = A.indexOf('='); D === -1 && (D = R); const M = D === R ? 0 : 4 - D % 4; return [D, M]
    } function l(A) { const R = a(A); const D = R[0]; const M = R[1]; return (D + M) * 3 / 4 - M } function d(A, R, D) { return (R + D) * 3 / 4 - D } function g(A) { let R; const D = a(A); const M = D[0]; const B = D[1]; const k = new n(d(A, M, B)); let F = 0; const ie = B > 0 ? M - 4 : M; let G; for (G = 0; G < ie; G += 4)R = r[A.charCodeAt(G)] << 18 | r[A.charCodeAt(G + 1)] << 12 | r[A.charCodeAt(G + 2)] << 6 | r[A.charCodeAt(G + 3)], k[F++] = R >> 16 & 255, k[F++] = R >> 8 & 255, k[F++] = R & 255; return B === 2 && (R = r[A.charCodeAt(G)] << 2 | r[A.charCodeAt(G + 1)] >> 4, k[F++] = R & 255), B === 1 && (R = r[A.charCodeAt(G)] << 10 | r[A.charCodeAt(G + 1)] << 4 | r[A.charCodeAt(G + 2)] >> 2, k[F++] = R >> 8 & 255, k[F++] = R & 255), k } function h(A) { return t[A >> 18 & 63] + t[A >> 12 & 63] + t[A >> 6 & 63] + t[A & 63] } function v(A, R, D) { for (var M, B = [], k = R; k < D; k += 3)M = (A[k] << 16 & 16711680) + (A[k + 1] << 8 & 65280) + (A[k + 2] & 255), B.push(h(M)); return B.join('') } function S(A) { for (var R, D = A.length, M = D % 3, B = [], k = 16383, F = 0, ie = D - M; F < ie; F += k)B.push(v(A, F, F + k > ie ? ie : F + k)); return M === 1 ? (R = A[D - 1], B.push(`${t[R >> 2] + t[R << 4 & 63]}==`)) : M === 2 && (R = (A[D - 2] << 8) + A[D - 1], B.push(`${t[R >> 10] + t[R >> 4 & 63] + t[R << 2 & 63]}=`)), B.join('') }
  }); const fa = oi((e) => {
    e.read = function (t, r, n, i, o) {
      let s; let a; const l = o * 8 - i - 1; const d = (1 << l) - 1; const g = d >> 1; let h = -7; let v = n ? o - 1 : 0; const S = n ? -1 : 1; let A = t[r + v]; for (v += S, s = A & (1 << -h) - 1, A >>= -h, h += l; h > 0; s = s * 256 + t[r + v], v += S, h -= 8);for (a = s & (1 << -h) - 1, s >>= -h, h += i; h > 0; a = a * 256 + t[r + v], v += S, h -= 8);if (s === 0) {
        s = 1 - g
      }
      else {
        if (s === d)
          return a ? Number.NaN : (A ? -1 : 1) * (1 / 0); a = a + 2 ** i, s = s - g
      } return (A ? -1 : 1) * a * 2 ** (s - i)
    }, e.write = function (t, r, n, i, o, s) { let a; let l; let d; let g = s * 8 - o - 1; const h = (1 << g) - 1; const v = h >> 1; const S = o === 23 ? 2 ** -24 - 2 ** -77 : 0; let A = i ? 0 : s - 1; const R = i ? 1 : -1; const D = r < 0 || r === 0 && 1 / r < 0 ? 1 : 0; for (r = Math.abs(r), isNaN(r) || r === 1 / 0 ? (l = isNaN(r) ? 1 : 0, a = h) : (a = Math.floor(Math.log(r) / Math.LN2), r * (d = 2 ** -a) < 1 && (a--, d *= 2), a + v >= 1 ? r += S / d : r += S * 2 ** (1 - v), r * d >= 2 && (a++, d /= 2), a + v >= h ? (l = 0, a = h) : a + v >= 1 ? (l = (r * d - 1) * 2 ** o, a = a + v) : (l = r * 2 ** (v - 1) * 2 ** o, a = 0)); o >= 8; t[n + A] = l & 255, A += R, l /= 256, o -= 8);for (a = a << o | l, g += o; g > 0; t[n + A] = a & 255, A += R, a /= 256, g -= 8);t[n + A - R] |= D * 128 }
  }); const tn = ma(); const We = fa(); const ti = typeof Symbol == 'function' && typeof Symbol.for == 'function' ? Symbol.for('nodejs.util.inspect.custom') : null; Ke.Buffer = T; Ke.SlowBuffer = Ea; Ke.INSPECT_MAX_BYTES = 50; const or = 2147483647; Ke.kMaxLength = or; T.TYPED_ARRAY_SUPPORT = da(); !T.TYPED_ARRAY_SUPPORT && typeof console < 'u' && typeof console.error == 'function' && console.error('This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.'); function da() {
    try { const e = new Uint8Array(1); const t = { foo() { return 42 } }; return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), e.foo() === 42 }
    catch { return !1 }
  }Object.defineProperty(T.prototype, 'parent', { enumerable: !0, get() {
    if (T.isBuffer(this))
      return this.buffer
  } }); Object.defineProperty(T.prototype, 'offset', { enumerable: !0, get() {
    if (T.isBuffer(this))
      return this.byteOffset
  } }); function be(e) {
    if (e > or)
      throw new RangeError(`The value "${e}" is invalid for option "size"`); const t = new Uint8Array(e); return Object.setPrototypeOf(t, T.prototype), t
  } function T(e, t, r) {
    if (typeof e == 'number') {
      if (typeof t == 'string')
        throw new TypeError('The "string" argument must be of type string. Received type number'); return on(e)
    } return si(e, t, r)
  }T.poolSize = 8192; function si(e, t, r) {
    if (typeof e == 'string')
      return ha(e, t); if (ArrayBuffer.isView(e))
      return ya(e); if (e == null)
      throw new TypeError(`The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ${typeof e}`); if (fe(e, ArrayBuffer) || e && fe(e.buffer, ArrayBuffer) || typeof SharedArrayBuffer < 'u' && (fe(e, SharedArrayBuffer) || e && fe(e.buffer, SharedArrayBuffer)))
      return li(e, t, r); if (typeof e == 'number')
      throw new TypeError('The "value" argument must not be of type number. Received type number'); const n = e.valueOf && e.valueOf(); if (n != null && n !== e)
      return T.from(n, t, r); const i = wa(e); if (i)
      return i; if (typeof Symbol < 'u' && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] == 'function')
      return T.from(e[Symbol.toPrimitive]('string'), t, r); throw new TypeError(`The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ${typeof e}`)
  }T.from = function (e, t, r) { return si(e, t, r) }; Object.setPrototypeOf(T.prototype, Uint8Array.prototype); Object.setPrototypeOf(T, Uint8Array); function ai(e) {
    if (typeof e != 'number')
      throw new TypeError('"size" argument must be of type number'); if (e < 0)
      throw new RangeError(`The value "${e}" is invalid for option "size"`)
  } function ga(e, t, r) { return ai(e), e <= 0 ? be(e) : t !== void 0 ? typeof r == 'string' ? be(e).fill(t, r) : be(e).fill(t) : be(e) }T.alloc = function (e, t, r) { return ga(e, t, r) }; function on(e) { return ai(e), be(e < 0 ? 0 : sn(e) | 0) }T.allocUnsafe = function (e) { return on(e) }; T.allocUnsafeSlow = function (e) { return on(e) }; function ha(e, t) {
    if ((typeof t != 'string' || t === '') && (t = 'utf8'), !T.isEncoding(t))
      throw new TypeError(`Unknown encoding: ${t}`); const r = ui(e, t) | 0; let n = be(r); const i = n.write(e, t); return i !== r && (n = n.slice(0, i)), n
  } function rn(e) { const t = e.length < 0 ? 0 : sn(e.length) | 0; const r = be(t); for (let n = 0; n < t; n += 1)r[n] = e[n] & 255; return r } function ya(e) { if (fe(e, Uint8Array)) { const t = new Uint8Array(e); return li(t.buffer, t.byteOffset, t.byteLength) } return rn(e) } function li(e, t, r) {
    if (t < 0 || e.byteLength < t)
      throw new RangeError('"offset" is outside of buffer bounds'); if (e.byteLength < t + (r || 0))
      throw new RangeError('"length" is outside of buffer bounds'); let n; return t === void 0 && r === void 0 ? n = new Uint8Array(e) : r === void 0 ? n = new Uint8Array(e, t) : n = new Uint8Array(e, t, r), Object.setPrototypeOf(n, T.prototype), n
  } function wa(e) {
    if (T.isBuffer(e)) { const t = sn(e.length) | 0; const r = be(t); return r.length === 0 || e.copy(r, 0, 0, t), r } if (e.length !== void 0)
      return typeof e.length != 'number' || ln(e.length) ? be(0) : rn(e); if (e.type === 'Buffer' && Array.isArray(e.data))
      return rn(e.data)
  } function sn(e) {
    if (e >= or)
      throw new RangeError(`Attempt to allocate Buffer larger than maximum size: 0x${or.toString(16)} bytes`); return e | 0
  } function Ea(e) { return +e != e && (e = 0), T.alloc(+e) }T.isBuffer = function (e) { return e != null && e._isBuffer === !0 && e !== T.prototype }; T.compare = function (e, t) {
    if (fe(e, Uint8Array) && (e = T.from(e, e.offset, e.byteLength)), fe(t, Uint8Array) && (t = T.from(t, t.offset, t.byteLength)), !T.isBuffer(e) || !T.isBuffer(t))
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'); if (e === t)
      return 0; let r = e.length; let n = t.length; for (let i = 0, o = Math.min(r, n); i < o; ++i) {
      if (e[i] !== t[i]) { r = e[i], n = t[i]; break }
    } return r < n ? -1 : n < r ? 1 : 0
  }; T.isEncoding = function (e) { switch (String(e).toLowerCase()) { case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'latin1':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return !0; default:return !1 } }; T.concat = function (e, t) {
    if (!Array.isArray(e))
      throw new TypeError('"list" argument must be an Array of Buffers'); if (e.length === 0)
      return T.alloc(0); let r; if (t === void 0) {
      for (t = 0, r = 0; r < e.length; ++r)t += e[r].length
    } const n = T.allocUnsafe(t); let i = 0; for (r = 0; r < e.length; ++r) {
      let o = e[r]; if (fe(o, Uint8Array))
        i + o.length > n.length ? (T.isBuffer(o) || (o = T.from(o)), o.copy(n, i)) : Uint8Array.prototype.set.call(n, o, i); else if (T.isBuffer(o))
        o.copy(n, i); else throw new TypeError('"list" argument must be an Array of Buffers'); i += o.length
    } return n
  }; function ui(e, t) {
    if (T.isBuffer(e))
      return e.length; if (ArrayBuffer.isView(e) || fe(e, ArrayBuffer))
      return e.byteLength; if (typeof e != 'string')
      throw new TypeError(`The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ${typeof e}`); const r = e.length; const n = arguments.length > 2 && arguments[2] === !0; if (!n && r === 0)
      return 0; let i = !1; for (;;) {
      switch (t) {
        case 'ascii':case 'latin1':case 'binary':return r; case 'utf8':case 'utf-8':return nn(e).length; case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return r * 2; case 'hex':return r >>> 1; case 'base64':return wi(e).length; default:if (i)
          return n ? -1 : nn(e).length; t = (`${t}`).toLowerCase(), i = !0
      }
    }
  }T.byteLength = ui; function ba(e, t, r) {
    let n = !1; if ((t === void 0 || t < 0) && (t = 0), t > this.length || ((r === void 0 || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, t >>>= 0, r <= t))
      return ''; for (e || (e = 'utf8'); ;) {
      switch (e) {
        case 'hex':return Ia(this, t, r); case 'utf8':case 'utf-8':return pi(this, t, r); case 'ascii':return Sa(this, t, r); case 'latin1':case 'binary':return ka(this, t, r); case 'base64':return Aa(this, t, r); case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return Oa(this, t, r); default:if (n)
          throw new TypeError(`Unknown encoding: ${e}`); e = (`${e}`).toLowerCase(), n = !0
      }
    }
  }T.prototype._isBuffer = !0; function Le(e, t, r) { const n = e[t]; e[t] = e[r], e[r] = n }T.prototype.swap16 = function () {
    const e = this.length; if (e % 2 !== 0)
      throw new RangeError('Buffer size must be a multiple of 16-bits'); for (let t = 0; t < e; t += 2)Le(this, t, t + 1); return this
  }; T.prototype.swap32 = function () {
    const e = this.length; if (e % 4 !== 0)
      throw new RangeError('Buffer size must be a multiple of 32-bits'); for (let t = 0; t < e; t += 4)Le(this, t, t + 3), Le(this, t + 1, t + 2); return this
  }; T.prototype.swap64 = function () {
    const e = this.length; if (e % 8 !== 0)
      throw new RangeError('Buffer size must be a multiple of 64-bits'); for (let t = 0; t < e; t += 8)Le(this, t, t + 7), Le(this, t + 1, t + 6), Le(this, t + 2, t + 5), Le(this, t + 3, t + 4); return this
  }; T.prototype.toString = function () { const e = this.length; return e === 0 ? '' : arguments.length === 0 ? pi(this, 0, e) : ba.apply(this, arguments) }; T.prototype.toLocaleString = T.prototype.toString; T.prototype.equals = function (e) {
    if (!T.isBuffer(e))
      throw new TypeError('Argument must be a Buffer'); return this === e ? !0 : T.compare(this, e) === 0
  }; T.prototype.inspect = function () { let e = ''; const t = Ke.INSPECT_MAX_BYTES; return e = this.toString('hex', 0, t).replace(/(.{2})/g, '$1 ').trim(), this.length > t && (e += ' ... '), `<Buffer ${e}>` }; ti && (T.prototype[ti] = T.prototype.inspect); T.prototype.compare = function (e, t, r, n, i) {
    if (fe(e, Uint8Array) && (e = T.from(e, e.offset, e.byteLength)), !T.isBuffer(e))
      throw new TypeError(`The "target" argument must be one of type Buffer or Uint8Array. Received type ${typeof e}`); if (t === void 0 && (t = 0), r === void 0 && (r = e ? e.length : 0), n === void 0 && (n = 0), i === void 0 && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length)
      throw new RangeError('out of range index'); if (n >= i && t >= r)
      return 0; if (n >= i)
      return -1; if (t >= r)
      return 1; if (t >>>= 0, r >>>= 0, n >>>= 0, i >>>= 0, this === e)
      return 0; let o = i - n; let s = r - t; const a = Math.min(o, s); const l = this.slice(n, i); const d = e.slice(t, r); for (let g = 0; g < a; ++g) {
      if (l[g] !== d[g]) { o = l[g], s = d[g]; break }
    } return o < s ? -1 : s < o ? 1 : 0
  }; function ci(e, t, r, n, i) {
    if (e.length === 0)
      return -1; if (typeof r == 'string' ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, ln(r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
      if (i)
        return -1; r = e.length - 1
    }
    else if (r < 0) {
      if (i)
        r = 0; else return -1
    } if (typeof t == 'string' && (t = T.from(t, n)), T.isBuffer(t))
      return t.length === 0 ? -1 : ri(e, t, r, n, i); if (typeof t == 'number')
      return t = t & 255, typeof Uint8Array.prototype.indexOf == 'function' ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : ri(e, [t], r, n, i); throw new TypeError('val must be string, number or Buffer')
  } function ri(e, t, r, n, i) {
    let o = 1; let s = e.length; let a = t.length; if (n !== void 0 && (n = String(n).toLowerCase(), n === 'ucs2' || n === 'ucs-2' || n === 'utf16le' || n === 'utf-16le')) {
      if (e.length < 2 || t.length < 2)
        return -1; o = 2, s /= 2, a /= 2, r /= 2
    } function l(g, h) { return o === 1 ? g[h] : g.readUInt16BE(h * o) } let d; if (i) {
      let g = -1; for (d = r; d < s; d++) {
        if (l(e, d) === l(t, g === -1 ? 0 : d - g)) {
          if (g === -1 && (g = d), d - g + 1 === a)
            return g * o
        }
        else {
          g !== -1 && (d -= d - g), g = -1
        }
      }
    }
    else {
      for (r + a > s && (r = s - a), d = r; d >= 0; d--) {
        let g = !0; for (let h = 0; h < a; h++) {
          if (l(e, d + h) !== l(t, h)) { g = !1; break }
        } if (g)
          return d
      }
    } return -1
  }T.prototype.includes = function (e, t, r) { return this.indexOf(e, t, r) !== -1 }; T.prototype.indexOf = function (e, t, r) { return ci(this, e, t, r, !0) }; T.prototype.lastIndexOf = function (e, t, r) { return ci(this, e, t, r, !1) }; function xa(e, t, r, n) {
    r = Number(r) || 0; const i = e.length - r; n ? (n = Number(n), n > i && (n = i)) : n = i; const o = t.length; n > o / 2 && (n = o / 2); let s; for (s = 0; s < n; ++s) {
      const a = Number.parseInt(t.substr(s * 2, 2), 16); if (ln(a))
        return s; e[r + s] = a
    } return s
  } function Pa(e, t, r, n) { return sr(nn(t, e.length - r), e, r, n) } function va(e, t, r, n) { return sr(Na(t), e, r, n) } function Ta(e, t, r, n) { return sr(wi(t), e, r, n) } function Ca(e, t, r, n) { return sr(Fa(t, e.length - r), e, r, n) }T.prototype.write = function (e, t, r, n) {
    if (t === void 0)
      n = 'utf8', r = this.length, t = 0; else if (r === void 0 && typeof t == 'string')
      n = t, r = this.length, t = 0; else if (isFinite(t))
      t = t >>> 0, isFinite(r) ? (r = r >>> 0, n === void 0 && (n = 'utf8')) : (n = r, r = void 0); else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported'); const i = this.length - t; if ((r === void 0 || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length)
      throw new RangeError('Attempt to write outside buffer bounds'); n || (n = 'utf8'); let o = !1; for (;;) {
      switch (n) {
        case 'hex':return xa(this, e, t, r); case 'utf8':case 'utf-8':return Pa(this, e, t, r); case 'ascii':case 'latin1':case 'binary':return va(this, e, t, r); case 'base64':return Ta(this, e, t, r); case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return Ca(this, e, t, r); default:if (o)
          throw new TypeError(`Unknown encoding: ${n}`); n = (`${n}`).toLowerCase(), o = !0
      }
    }
  }; T.prototype.toJSON = function () { return { type: 'Buffer', data: Array.prototype.slice.call(this._arr || this, 0) } }; function Aa(e, t, r) { return t === 0 && r === e.length ? tn.fromByteArray(e) : tn.fromByteArray(e.slice(t, r)) } function pi(e, t, r) { r = Math.min(e.length, r); const n = []; let i = t; for (;i < r;) { const o = e[i]; let s = null; let a = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1; if (i + a <= r) { let l, d, g, h; switch (a) { case 1:o < 128 && (s = o); break; case 2:l = e[i + 1], (l & 192) === 128 && (h = (o & 31) << 6 | l & 63, h > 127 && (s = h)); break; case 3:l = e[i + 1], d = e[i + 2], (l & 192) === 128 && (d & 192) === 128 && (h = (o & 15) << 12 | (l & 63) << 6 | d & 63, h > 2047 && (h < 55296 || h > 57343) && (s = h)); break; case 4:l = e[i + 1], d = e[i + 2], g = e[i + 3], (l & 192) === 128 && (d & 192) === 128 && (g & 192) === 128 && (h = (o & 15) << 18 | (l & 63) << 12 | (d & 63) << 6 | g & 63, h > 65535 && h < 1114112 && (s = h)) } }s === null ? (s = 65533, a = 1) : s > 65535 && (s -= 65536, n.push(s >>> 10 & 1023 | 55296), s = 56320 | s & 1023), n.push(s), i += a } return Ra(n) } const ni = 4096; function Ra(e) {
    const t = e.length; if (t <= ni)
      return String.fromCharCode.apply(String, e); let r = ''; let n = 0; for (;n < t;)r += String.fromCharCode.apply(String, e.slice(n, n += ni)); return r
  } function Sa(e, t, r) { let n = ''; r = Math.min(e.length, r); for (let i = t; i < r; ++i)n += String.fromCharCode(e[i] & 127); return n } function ka(e, t, r) { let n = ''; r = Math.min(e.length, r); for (let i = t; i < r; ++i)n += String.fromCharCode(e[i]); return n } function Ia(e, t, r) { const n = e.length; (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n); let i = ''; for (let o = t; o < r; ++o)i += La[e[o]]; return i } function Oa(e, t, r) { const n = e.slice(t, r); let i = ''; for (let o = 0; o < n.length - 1; o += 2)i += String.fromCharCode(n[o] + n[o + 1] * 256); return i }T.prototype.slice = function (e, t) { const r = this.length; e = ~~e, t = t === void 0 ? r : ~~t, e < 0 ? (e += r, e < 0 && (e = 0)) : e > r && (e = r), t < 0 ? (t += r, t < 0 && (t = 0)) : t > r && (t = r), t < e && (t = e); const n = this.subarray(e, t); return Object.setPrototypeOf(n, T.prototype), n }; function W(e, t, r) {
    if (e % 1 !== 0 || e < 0)
      throw new RangeError('offset is not uint'); if (e + t > r)
      throw new RangeError('Trying to access beyond buffer length')
  }T.prototype.readUintLE = T.prototype.readUIntLE = function (e, t, r) { e = e >>> 0, t = t >>> 0, r || W(e, t, this.length); let n = this[e]; let i = 1; let o = 0; for (;++o < t && (i *= 256);)n += this[e + o] * i; return n }; T.prototype.readUintBE = T.prototype.readUIntBE = function (e, t, r) { e = e >>> 0, t = t >>> 0, r || W(e, t, this.length); let n = this[e + --t]; let i = 1; for (;t > 0 && (i *= 256);)n += this[e + --t] * i; return n }; T.prototype.readUint8 = T.prototype.readUInt8 = function (e, t) { return e = e >>> 0, t || W(e, 1, this.length), this[e] }; T.prototype.readUint16LE = T.prototype.readUInt16LE = function (e, t) { return e = e >>> 0, t || W(e, 2, this.length), this[e] | this[e + 1] << 8 }; T.prototype.readUint16BE = T.prototype.readUInt16BE = function (e, t) { return e = e >>> 0, t || W(e, 2, this.length), this[e] << 8 | this[e + 1] }; T.prototype.readUint32LE = T.prototype.readUInt32LE = function (e, t) { return e = e >>> 0, t || W(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216 }; T.prototype.readUint32BE = T.prototype.readUInt32BE = function (e, t) { return e = e >>> 0, t || W(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]) }; T.prototype.readBigUInt64LE = Ae(function (e) { e = e >>> 0, He(e, 'offset'); const t = this[e]; const r = this[e + 7]; (t === void 0 || r === void 0) && bt(e, this.length - 8); const n = t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24; const i = this[++e] + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + r * 2 ** 24; return BigInt(n) + (BigInt(i) << BigInt(32)) }); T.prototype.readBigUInt64BE = Ae(function (e) { e = e >>> 0, He(e, 'offset'); const t = this[e]; const r = this[e + 7]; (t === void 0 || r === void 0) && bt(e, this.length - 8); const n = t * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e]; const i = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + r; return (BigInt(n) << BigInt(32)) + BigInt(i) }); T.prototype.readIntLE = function (e, t, r) { e = e >>> 0, t = t >>> 0, r || W(e, t, this.length); let n = this[e]; let i = 1; let o = 0; for (;++o < t && (i *= 256);)n += this[e + o] * i; return i *= 128, n >= i && (n -= 2 ** (8 * t)), n }; T.prototype.readIntBE = function (e, t, r) { e = e >>> 0, t = t >>> 0, r || W(e, t, this.length); let n = t; let i = 1; let o = this[e + --n]; for (;n > 0 && (i *= 256);)o += this[e + --n] * i; return i *= 128, o >= i && (o -= 2 ** (8 * t)), o }; T.prototype.readInt8 = function (e, t) { return e = e >>> 0, t || W(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e] }; T.prototype.readInt16LE = function (e, t) { e = e >>> 0, t || W(e, 2, this.length); const r = this[e] | this[e + 1] << 8; return r & 32768 ? r | 4294901760 : r }; T.prototype.readInt16BE = function (e, t) { e = e >>> 0, t || W(e, 2, this.length); const r = this[e + 1] | this[e] << 8; return r & 32768 ? r | 4294901760 : r }; T.prototype.readInt32LE = function (e, t) { return e = e >>> 0, t || W(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24 }; T.prototype.readInt32BE = function (e, t) { return e = e >>> 0, t || W(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3] }; T.prototype.readBigInt64LE = Ae(function (e) { e = e >>> 0, He(e, 'offset'); const t = this[e]; const r = this[e + 7]; (t === void 0 || r === void 0) && bt(e, this.length - 8); const n = this[e + 4] + this[e + 5] * 2 ** 8 + this[e + 6] * 2 ** 16 + (r << 24); return (BigInt(n) << BigInt(32)) + BigInt(t + this[++e] * 2 ** 8 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24) }); T.prototype.readBigInt64BE = Ae(function (e) { e = e >>> 0, He(e, 'offset'); const t = this[e]; const r = this[e + 7]; (t === void 0 || r === void 0) && bt(e, this.length - 8); const n = (t << 24) + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + this[++e]; return (BigInt(n) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 2 ** 8 + r) }); T.prototype.readFloatLE = function (e, t) { return e = e >>> 0, t || W(e, 4, this.length), We.read(this, e, !0, 23, 4) }; T.prototype.readFloatBE = function (e, t) { return e = e >>> 0, t || W(e, 4, this.length), We.read(this, e, !1, 23, 4) }; T.prototype.readDoubleLE = function (e, t) { return e = e >>> 0, t || W(e, 8, this.length), We.read(this, e, !0, 52, 8) }; T.prototype.readDoubleBE = function (e, t) { return e = e >>> 0, t || W(e, 8, this.length), We.read(this, e, !1, 52, 8) }; function te(e, t, r, n, i, o) {
    if (!T.isBuffer(e))
      throw new TypeError('"buffer" argument must be a Buffer instance'); if (t > i || t < o)
      throw new RangeError('"value" argument is out of bounds'); if (r + n > e.length)
      throw new RangeError('Index out of range')
  }T.prototype.writeUintLE = T.prototype.writeUIntLE = function (e, t, r, n) { if (e = +e, t = t >>> 0, r = r >>> 0, !n) { const s = 2 ** (8 * r) - 1; te(this, e, t, r, s, 0) } let i = 1; let o = 0; for (this[t] = e & 255; ++o < r && (i *= 256);) this[t + o] = e / i & 255; return t + r }; T.prototype.writeUintBE = T.prototype.writeUIntBE = function (e, t, r, n) { if (e = +e, t = t >>> 0, r = r >>> 0, !n) { const s = 2 ** (8 * r) - 1; te(this, e, t, r, s, 0) } let i = r - 1; let o = 1; for (this[t + i] = e & 255; --i >= 0 && (o *= 256);) this[t + i] = e / o & 255; return t + r }; T.prototype.writeUint8 = T.prototype.writeUInt8 = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 1, 255, 0), this[t] = e & 255, t + 1 }; T.prototype.writeUint16LE = T.prototype.writeUInt16LE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 2, 65535, 0), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2 }; T.prototype.writeUint16BE = T.prototype.writeUInt16BE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2 }; T.prototype.writeUint32LE = T.prototype.writeUInt32LE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = e & 255, t + 4 }; T.prototype.writeUint32BE = T.prototype.writeUInt32BE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4 }; function mi(e, t, r, n, i) { yi(t, n, i, e, r, 7); let o = Number(t & BigInt(4294967295)); e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o, o = o >> 8, e[r++] = o; let s = Number(t >> BigInt(32) & BigInt(4294967295)); return e[r++] = s, s = s >> 8, e[r++] = s, s = s >> 8, e[r++] = s, s = s >> 8, e[r++] = s, r } function fi(e, t, r, n, i) { yi(t, n, i, e, r, 7); let o = Number(t & BigInt(4294967295)); e[r + 7] = o, o = o >> 8, e[r + 6] = o, o = o >> 8, e[r + 5] = o, o = o >> 8, e[r + 4] = o; let s = Number(t >> BigInt(32) & BigInt(4294967295)); return e[r + 3] = s, s = s >> 8, e[r + 2] = s, s = s >> 8, e[r + 1] = s, s = s >> 8, e[r] = s, r + 8 }T.prototype.writeBigUInt64LE = Ae(function (e, t = 0) { return mi(this, e, t, BigInt(0), BigInt('0xffffffffffffffff')) }); T.prototype.writeBigUInt64BE = Ae(function (e, t = 0) { return fi(this, e, t, BigInt(0), BigInt('0xffffffffffffffff')) }); T.prototype.writeIntLE = function (e, t, r, n) { if (e = +e, t = t >>> 0, !n) { const a = 2 ** (8 * r - 1); te(this, e, t, r, a - 1, -a) } let i = 0; let o = 1; let s = 0; for (this[t] = e & 255; ++i < r && (o *= 256);)e < 0 && s === 0 && this[t + i - 1] !== 0 && (s = 1), this[t + i] = (e / o >> 0) - s & 255; return t + r }; T.prototype.writeIntBE = function (e, t, r, n) { if (e = +e, t = t >>> 0, !n) { const a = 2 ** (8 * r - 1); te(this, e, t, r, a - 1, -a) } let i = r - 1; let o = 1; let s = 0; for (this[t + i] = e & 255; --i >= 0 && (o *= 256);)e < 0 && s === 0 && this[t + i + 1] !== 0 && (s = 1), this[t + i] = (e / o >> 0) - s & 255; return t + r }; T.prototype.writeInt8 = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = e & 255, t + 1 }; T.prototype.writeInt16LE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 2, 32767, -32768), this[t] = e & 255, this[t + 1] = e >>> 8, t + 2 }; T.prototype.writeInt16BE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = e & 255, t + 2 }; T.prototype.writeInt32LE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 4, 2147483647, -2147483648), this[t] = e & 255, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4 }; T.prototype.writeInt32BE = function (e, t, r) { return e = +e, t = t >>> 0, r || te(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = e & 255, t + 4 }; T.prototype.writeBigInt64LE = Ae(function (e, t = 0) { return mi(this, e, t, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff')) }); T.prototype.writeBigInt64BE = Ae(function (e, t = 0) { return fi(this, e, t, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff')) }); function di(e, t, r, n, i, o) {
    if (r + n > e.length)
      throw new RangeError('Index out of range'); if (r < 0)
      throw new RangeError('Index out of range')
  } function gi(e, t, r, n, i) { return t = +t, r = r >>> 0, i || di(e, t, r, 4, 34028234663852886e22, -34028234663852886e22), We.write(e, t, r, n, 23, 4), r + 4 }T.prototype.writeFloatLE = function (e, t, r) { return gi(this, e, t, !0, r) }; T.prototype.writeFloatBE = function (e, t, r) { return gi(this, e, t, !1, r) }; function hi(e, t, r, n, i) { return t = +t, r = r >>> 0, i || di(e, t, r, 8, 17976931348623157e292, -17976931348623157e292), We.write(e, t, r, n, 52, 8), r + 8 }T.prototype.writeDoubleLE = function (e, t, r) { return hi(this, e, t, !0, r) }; T.prototype.writeDoubleBE = function (e, t, r) { return hi(this, e, t, !1, r) }; T.prototype.copy = function (e, t, r, n) {
    if (!T.isBuffer(e))
      throw new TypeError('argument should be a Buffer'); if (r || (r = 0), !n && n !== 0 && (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r || e.length === 0 || this.length === 0)
      return 0; if (t < 0)
      throw new RangeError('targetStart out of bounds'); if (r < 0 || r >= this.length)
      throw new RangeError('Index out of range'); if (n < 0)
      throw new RangeError('sourceEnd out of bounds'); n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r); const i = n - r; return this === e && typeof Uint8Array.prototype.copyWithin == 'function' ? this.copyWithin(t, r, n) : Uint8Array.prototype.set.call(e, this.subarray(r, n), t), i
  }; T.prototype.fill = function (e, t, r, n) {
    if (typeof e == 'string') {
      if (typeof t == 'string' ? (n = t, t = 0, r = this.length) : typeof r == 'string' && (n = r, r = this.length), n !== void 0 && typeof n != 'string')
        throw new TypeError('encoding must be a string'); if (typeof n == 'string' && !T.isEncoding(n))
        throw new TypeError(`Unknown encoding: ${n}`); if (e.length === 1) { const o = e.charCodeAt(0); (n === 'utf8' && o < 128 || n === 'latin1') && (e = o) }
    }
    else {
      typeof e == 'number' ? e = e & 255 : typeof e == 'boolean' && (e = Number(e))
    } if (t < 0 || this.length < t || this.length < r)
      throw new RangeError('Out of range index'); if (r <= t)
      return this; t = t >>> 0, r = r === void 0 ? this.length : r >>> 0, e || (e = 0); let i; if (typeof e == 'number') {
      for (i = t; i < r; ++i) this[i] = e
    }
    else {
      const o = T.isBuffer(e) ? e : T.from(e, n); const s = o.length; if (s === 0)
        throw new TypeError(`The value "${e}" is invalid for argument "value"`); for (i = 0; i < r - t; ++i) this[i + t] = o[i % s]
    } return this
  }; const Je = {}; function an(e, t, r) { Je[e] = class extends r {constructor() { super(), Object.defineProperty(this, 'message', { value: t.apply(this, arguments), writable: !0, configurable: !0 }), this.name = `${this.name} [${e}]`, this.stack, delete this.name } get code() { return e } set code(n) { Object.defineProperty(this, 'code', { configurable: !0, enumerable: !0, value: n, writable: !0 }) }toString() { return `${this.name} [${e}]: ${this.message}` }} }an('ERR_BUFFER_OUT_OF_BOUNDS', (e) => { return e ? `${e} is outside of buffer bounds` : 'Attempt to access memory outside buffer bounds' }, RangeError); an('ERR_INVALID_ARG_TYPE', (e, t) => { return `The "${e}" argument must be of type number. Received type ${typeof t}` }, TypeError); an('ERR_OUT_OF_RANGE', (e, t, r) => { let n = `The value of "${e}" is out of range.`; let i = r; return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? i = ii(String(r)) : typeof r == 'bigint' && (i = String(r), (r > BigInt(2) ** BigInt(32) || r < -(BigInt(2) ** BigInt(32))) && (i = ii(i)), i += 'n'), n += ` It must be ${t}. Received ${i}`, n }, RangeError); function ii(e) { let t = ''; let r = e.length; const n = e[0] === '-' ? 1 : 0; for (;r >= n + 4; r -= 3)t = `_${e.slice(r - 3, r)}${t}`; return `${e.slice(0, r)}${t}` } function Da(e, t, r) { He(t, 'offset'), (e[t] === void 0 || e[t + r] === void 0) && bt(t, e.length - (r + 1)) } function yi(e, t, r, n, i, o) { if (e > r || e < t) { const s = typeof t == 'bigint' ? 'n' : ''; let a; throw o > 3 ? t === 0 || t === BigInt(0) ? a = `>= 0${s} and < 2${s} ** ${(o + 1) * 8}${s}` : a = `>= -(2${s} ** ${(o + 1) * 8 - 1}${s}) and < 2 ** ${(o + 1) * 8 - 1}${s}` : a = `>= ${t}${s} and <= ${r}${s}`, new Je.ERR_OUT_OF_RANGE('value', a, e) }Da(n, i, o) } function He(e, t) {
    if (typeof e != 'number')
      throw new Je.ERR_INVALID_ARG_TYPE(t, 'number', e)
  } function bt(e, t, r) { throw Math.floor(e) !== e ? (He(e, r), new Je.ERR_OUT_OF_RANGE(r || 'offset', 'an integer', e)) : t < 0 ? new Je.ERR_BUFFER_OUT_OF_BOUNDS() : new Je.ERR_OUT_OF_RANGE(r || 'offset', `>= ${r ? 1 : 0} and <= ${t}`, e) } const Ma = /[^+/\w-]/g; function _a(e) {
    if (e = e.split('=')[0], e = e.trim().replace(Ma, ''), e.length < 2)
      return ''; for (;e.length % 4 !== 0;)e = `${e}=`; return e
  } function nn(e, t) {
    t = t || 1 / 0; let r; const n = e.length; let i = null; const o = []; for (let s = 0; s < n; ++s) {
      if (r = e.charCodeAt(s), r > 55295 && r < 57344) {
        if (!i) {
          if (r > 56319) { (t -= 3) > -1 && o.push(239, 191, 189); continue }
          else if (s + 1 === n) { (t -= 3) > -1 && o.push(239, 191, 189); continue }i = r; continue
        } if (r < 56320) { (t -= 3) > -1 && o.push(239, 191, 189), i = r; continue }r = (i - 55296 << 10 | r - 56320) + 65536
      }
      else {
        i && (t -= 3) > -1 && o.push(239, 191, 189)
      } if (i = null, r < 128) {
        if ((t -= 1) < 0)
          break; o.push(r)
      }
      else if (r < 2048) {
        if ((t -= 2) < 0)
          break; o.push(r >> 6 | 192, r & 63 | 128)
      }
      else if (r < 65536) {
        if ((t -= 3) < 0)
          break; o.push(r >> 12 | 224, r >> 6 & 63 | 128, r & 63 | 128)
      }
      else if (r < 1114112) {
        if ((t -= 4) < 0)
          break; o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, r & 63 | 128)
      }
      else {
        throw new Error('Invalid code point')
      }
    } return o
  } function Na(e) { const t = []; for (let r = 0; r < e.length; ++r)t.push(e.charCodeAt(r) & 255); return t } function Fa(e, t) { let r; let n; let i; const o = []; for (let s = 0; s < e.length && !((t -= 2) < 0); ++s)r = e.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n); return o } function wi(e) { return tn.toByteArray(_a(e)) } function sr(e, t, r, n) { let i; for (i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i)t[i + r] = e[i]; return i } function fe(e, t) { return e instanceof t || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === t.name } function ln(e) { return e !== e } var La = (function () { const e = '0123456789abcdef'; const t = Array.from({ length: 256 }); for (let r = 0; r < 16; ++r) { const n = r * 16; for (let i = 0; i < 16; ++i)t[n + i] = e[r] + e[i] } return t }()); function Ae(e) { return typeof BigInt > 'u' ? Ba : e } function Ba() { throw new Error('BigInt not supported') }
}); let w; var f = me(() => { 'use strict'; w = Qe(Ei()) }); function Ga() { return !1 } function Bi() { return { dev: 0, ino: 0, mode: 0, nlink: 0, uid: 0, gid: 0, rdev: 0, size: 0, blksize: 0, blocks: 0, atimeMs: 0, mtimeMs: 0, ctimeMs: 0, birthtimeMs: 0, atime: new Date(), mtime: new Date(), ctime: new Date(), birthtime: new Date() } } function Qa() { return Bi() } function Ja() { return [] } function Wa(e) { e(null, []) } function Ha() { return '' } function Ka() { return '' } function za() {} function Ya() {} function Za() {} function Xa() {} function el() {} function tl() {} let rl; let nl; let qi; const Ui = me(() => { 'use strict'; f(); u(); c(); p(); m(); rl = {}, nl = { existsSync: Ga, lstatSync: Bi, statSync: Qa, readdirSync: Ja, readdir: Wa, readlinkSync: Ha, realpathSync: Ka, chmodSync: za, renameSync: Ya, mkdirSync: Za, rmdirSync: Xa, rmSync: el, unlinkSync: tl, promises: rl }, qi = nl }); function il(...e) { return e.join('/') } function ol(...e) { return e.join('/') } function sl(e) { const t = $i(e); const r = ji(e); const [n, i] = t.split('.'); return { root: '/', dir: r, base: t, ext: i, name: n } } function $i(e) { const t = e.split('/'); return t[t.length - 1] } function ji(e) { return e.split('/').slice(0, -1).join('/') } let Vi; let al; let ll; let cr; const Gi = me(() => { 'use strict'; f(); u(); c(); p(); m(); Vi = '/', al = { sep: Vi }, ll = { basename: $i, dirname: ji, join: ol, parse: sl, posix: al, resolve: il, sep: Vi }, cr = ll }); const Qi = Fe((af, ul) => { ul.exports = { name: '@prisma/internals', version: '6.7.0', description: 'This package is intended for Prisma\'s internal use', main: 'dist/index.js', types: 'dist/index.d.ts', repository: { type: 'git', url: 'https://github.com/prisma/prisma.git', directory: 'packages/internals' }, homepage: 'https://www.prisma.io', author: 'Tim Suchanek <suchanek@prisma.io>', bugs: 'https://github.com/prisma/prisma/issues', license: 'Apache-2.0', scripts: { dev: 'DEV=true tsx helpers/build.ts', build: 'tsx helpers/build.ts', test: 'dotenv -e ../../.db.env -- jest --silent', prepublishOnly: 'pnpm run build' }, files: ['README.md', 'dist', '!**/libquery_engine*', '!dist/get-generators/engines/*', 'scripts'], devDependencies: { '@babel/helper-validator-identifier': '7.25.9', '@opentelemetry/api': '1.9.0', '@swc/core': '1.11.5', '@swc/jest': '0.2.37', '@types/babel__helper-validator-identifier': '7.15.2', '@types/jest': '29.5.14', '@types/node': '18.19.76', '@types/resolve': '1.20.6', 'archiver': '6.0.2', 'checkpoint-client': '1.1.33', 'cli-truncate': '4.0.0', 'dotenv': '16.4.7', 'esbuild': '0.25.1', 'escape-string-regexp': '5.0.0', 'execa': '5.1.1', 'fast-glob': '3.3.3', 'find-up': '7.0.0', 'fp-ts': '2.16.9', 'fs-extra': '11.3.0', 'fs-jetpack': '5.1.0', 'global-dirs': '4.0.0', 'globby': '11.1.0', 'identifier-regex': '1.0.0', 'indent-string': '4.0.0', 'is-windows': '1.0.2', 'is-wsl': '3.1.0', 'jest': '29.7.0', 'jest-junit': '16.0.0', 'kleur': '4.1.5', 'mock-stdin': '1.0.0', 'new-github-issue-url': '0.2.1', 'node-fetch': '3.3.2', 'npm-packlist': '5.1.3', 'open': '7.4.2', 'p-map': '4.0.0', 'read-package-up': '11.0.0', 'resolve': '1.22.10', 'string-width': '7.2.0', 'strip-ansi': '6.0.1', 'strip-indent': '4.0.0', 'temp-dir': '2.0.0', 'tempy': '1.0.1', 'terminal-link': '4.0.0', 'tmp': '0.2.3', 'ts-node': '10.9.2', 'ts-pattern': '5.6.2', 'ts-toolbelt': '9.6.0', 'typescript': '5.4.5', 'yarn': '1.22.22' }, dependencies: { '@prisma/config': 'workspace:*', '@prisma/debug': 'workspace:*', '@prisma/dmmf': 'workspace:*', '@prisma/driver-adapter-utils': 'workspace:*', '@prisma/engines': 'workspace:*', '@prisma/fetch-engine': 'workspace:*', '@prisma/generator': 'workspace:*', '@prisma/generator-helper': 'workspace:*', '@prisma/get-platform': 'workspace:*', '@prisma/prisma-schema-wasm': '6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed', '@prisma/schema-engine-wasm': '6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed', '@prisma/schema-files-loader': 'workspace:*', 'arg': '5.0.2', 'prompts': '2.4.2' }, peerDependencies: { typescript: '>=5.1.0' }, peerDependenciesMeta: { typescript: { optional: !0 } }, sideEffects: !1 } }); const Hi = Fe((Af, Wi) => {
  'use strict'; f(); u(); c(); p(); m(); Wi.exports = (e, t = 1, r) => {
    if (r = { indent: ' ', includeEmptyLines: !1, ...r }, typeof e != 'string')
      throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e}\``); if (typeof t != 'number')
      throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t}\``); if (typeof r.indent != 'string')
      throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r.indent}\``); if (t === 0)
      return e; const n = r.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm; return e.replace(n, r.indent.repeat(t))
  }
}); const Yi = Fe((Bf, zi) => { 'use strict'; f(); u(); c(); p(); m(); zi.exports = ({ onlyFirst: e = !1 } = {}) => { const t = ['[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)', '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|'); return new RegExp(t, e ? void 0 : 'g') } }); const Xi = Fe((Gf, Zi) => { 'use strict'; f(); u(); c(); p(); m(); const yl = Yi(); Zi.exports = e => typeof e == 'string' ? e.replace(yl(), '') : e }); const Pn = Fe((Dy, wo) => {
  'use strict'; f(); u(); c(); p(); m(); wo.exports = (function () {
    function e(t, r, n, i, o) { return t < r || n < r ? t > n ? n + 1 : t + 1 : i === o ? r : r + 1 } return function (t, r) {
      if (t === r)
        return 0; if (t.length > r.length) { const n = t; t = r, r = n } for (var i = t.length, o = r.length; i > 0 && t.charCodeAt(i - 1) === r.charCodeAt(o - 1);)i--, o--; for (var s = 0; s < i && t.charCodeAt(s) === r.charCodeAt(s);)s++; if (i -= s, o -= s, i === 0 || o < 3)
        return o; let a = 0; let l; let d; let g; let h; let v; let S; let A; let R; let D; let M; let B; let k; const F = []; for (l = 0; l < i; l++)F.push(l + 1), F.push(t.charCodeAt(s + l)); for (var ie = F.length - 1; a < o - 3;) {
        for (D = r.charCodeAt(s + (d = a)), M = r.charCodeAt(s + (g = a + 1)), B = r.charCodeAt(s + (h = a + 2)), k = r.charCodeAt(s + (v = a + 3)), S = a += 4, l = 0; l < ie; l += 2)A = F[l], R = F[l + 1], d = e(A, d, g, D, R), g = e(d, g, h, M, R), h = e(g, h, v, B, R), S = e(h, v, S, k, R), F[l] = S, v = h, h = g, g = d, d = A
      } for (;a < o;) {
        for (D = r.charCodeAt(s + (d = a)), S = ++a, l = 0; l < ie; l += 2)A = F[l], F[l] = S = e(A, d, S, D, F[l + 1]), d = A
      } return S
    }
  }())
}); const vo = me(() => { 'use strict'; f(); u(); c(); p(); m() }); const To = me(() => { 'use strict'; f(); u(); c(); p(); m() }); const Qo = Fe((e1, ac) => { ac.exports = { name: '@prisma/engines-version', version: '6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed', main: 'index.js', types: 'index.d.ts', license: 'Apache-2.0', author: 'Tim Suchanek <suchanek@prisma.io>', prisma: { enginesVersion: '3cff47a7f5d65c3ea74883f1d736e41d68ce91ed' }, repository: { type: 'git', url: 'https://github.com/prisma/engines-wrapper.git', directory: 'packages/engines-version' }, devDependencies: { '@types/node': '18.19.76', 'typescript': '4.9.5' }, files: ['index.js', 'index.d.ts'], scripts: { build: 'tsc -d' } } }); let Lr; const Jo = me(() => { 'use strict'; f(); u(); c(); p(); m(); Lr = class {events = {}; on(t, r) { return this.events[t] || (this.events[t] = []), this.events[t].push(r), this }emit(t, ...r) { return this.events[t] ? (this.events[t].forEach((n) => { n(...r) }), !0) : !1 }} }); f(); u(); c(); p(); m(); const Pi = {}; ir(Pi, { defineExtension: () => bi, getExtensionContext: () => xi }); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function bi(e) { return typeof e == 'function' ? e : t => t.$extends(e) }f(); u(); c(); p(); m(); function xi(e) { return e } const Ti = {}; ir(Ti, { validator: () => vi }); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function vi(...e) { return t => t }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); let un; let Ci; let Ai; let Ri; let Si = !0; typeof y < 'u' && ({ FORCE_COLOR: un, NODE_DISABLE_COLORS: Ci, NO_COLOR: Ai, TERM: Ri } = y.env || {}, Si = y.stdout && y.stdout.isTTY); const qa = { enabled: !Ci && Ai == null && Ri !== 'dumb' && (un != null && un !== '0' || Si) }; function j(e, t) { const r = new RegExp(`\\x1b\\[${t}m`, 'g'); const n = `\x1B[${e}m`; const i = `\x1B[${t}m`; return function (o) { return !qa.enabled || o == null ? o : n + (~(`${o}`).indexOf(i) ? o.replace(r, i + n) : o) + i } } const um = j(0, 0); const ar = j(1, 22); const lr = j(2, 22); const cm = j(3, 23); const ki = j(4, 24); const pm = j(7, 27); const mm = j(8, 28); const fm = j(9, 29); const dm = j(30, 39); const ze = j(31, 39); const Ii = j(32, 39); const Oi = j(33, 39); const Di = j(34, 39); const gm = j(35, 39); const Mi = j(36, 39); const hm = j(37, 39); const _i = j(90, 39); const ym = j(90, 39); const wm = j(40, 49); const Em = j(41, 49); const bm = j(42, 49); const xm = j(43, 49); const Pm = j(44, 49); const vm = j(45, 49); const Tm = j(46, 49); const Cm = j(47, 49); f(); u(); c(); p(); m(); const Ua = 100; const Ni = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']; const ur = []; let Fi = Date.now(); let $a = 0; const cn = typeof y < 'u' ? y.env : {}; globalThis.DEBUG ??= cn.DEBUG ?? ''; globalThis.DEBUG_COLORS ??= cn.DEBUG_COLORS ? cn.DEBUG_COLORS === 'true' : !0; const xt = { enable(e) { typeof e == 'string' && (globalThis.DEBUG = e) }, disable() { const e = globalThis.DEBUG; return globalThis.DEBUG = '', e }, enabled(e) { const t = globalThis.DEBUG.split(',').map(i => i.replace(/[.+?^${}()|[\]\\]/g, '\\$&')); const r = t.some(i => i === '' || i[0] === '-' ? !1 : e.match(new RegExp(`${i.split('*').join('.*')}$`))); const n = t.some(i => i === '' || i[0] !== '-' ? !1 : e.match(new RegExp(`${i.slice(1).split('*').join('.*')}$`))); return r && !n }, log: (...e) => { const [t, r, ...n] = e; (console.warn ?? console.log)(`${t} ${r}`, ...n) }, formatters: {} }; function ja(e) { const t = { color: Ni[$a++ % Ni.length], enabled: xt.enabled(e), namespace: e, log: xt.log, extend: () => {} }; const r = (...n) => { const { enabled: i, namespace: o, color: s, log: a } = t; if (n.length !== 0 && ur.push([o, ...n]), ur.length > Ua && ur.shift(), xt.enabled(o) || i) { const l = n.map(g => typeof g == 'string' ? g : Va(g)); const d = `+${Date.now() - Fi}ms`; Fi = Date.now(), a(o, ...l, d) } }; return new Proxy(r, { get: (n, i) => t[i], set: (n, i, o) => t[i] = o }) } const Y = new Proxy(ja, { get: (e, t) => xt[t], set: (e, t, r) => xt[t] = r }); function Va(e, t = 2) {
  const r = new Set(); return JSON.stringify(e, (n, i) => {
    if (typeof i == 'object' && i !== null) {
      if (r.has(i))
        return '[Circular *]'; r.add(i)
    }
    else if (typeof i == 'bigint') {
      return i.toString()
    } return i
  }, t)
} function Li() { ur.length = 0 }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const cl = Qi(); const pn = cl.version; f(); u(); c(); p(); m(); function Ye(e) { const t = pl(); return t || (e?.config.engineType === 'library' ? 'library' : e?.config.engineType === 'binary' ? 'binary' : e?.config.engineType === 'client' ? 'client' : ml(e)) } function pl() { const e = y.env.PRISMA_CLIENT_ENGINE_TYPE; return e === 'library' ? 'library' : e === 'binary' ? 'binary' : e === 'client' ? 'client' : void 0 } function ml(e) { return e?.previewFeatures.includes('queryCompiler') ? 'client' : 'library' }f(); u(); c(); p(); m(); const Ji = 'prisma+postgres'; const pr = `${Ji}:`; function mn(e) { return e?.startsWith(`${pr}//`) ?? !1 } const vt = {}; ir(vt, { error: () => gl, info: () => dl, log: () => fl, query: () => hl, should: () => Ki, tags: () => Pt, warn: () => fn }); f(); u(); c(); p(); m(); var Pt = { error: ze('prisma:error'), warn: Oi('prisma:warn'), info: Mi('prisma:info'), query: Di('prisma:query') }; var Ki = { warn: () => !y.env.PRISMA_DISABLE_WARNINGS }; function fl(...e) { console.log(...e) } function fn(e, ...t) { Ki.warn() && console.warn(`${Pt.warn} ${e}`, ...t) } function dl(e, ...t) { console.info(`${Pt.info} ${e}`, ...t) } function gl(e, ...t) { console.error(`${Pt.error} ${e}`, ...t) } function hl(e, ...t) { console.log(`${Pt.query} ${e}`, ...t) }f(); u(); c(); p(); m(); function xe(e, t) { throw new Error(t) }f(); u(); c(); p(); m(); function dn(e, t) { return Object.prototype.hasOwnProperty.call(e, t) }f(); u(); c(); p(); m(); function Ze(e, t) { const r = {}; for (const n of Object.keys(e))r[n] = t(e[n], n); return r }f(); u(); c(); p(); m(); function gn(e, t) {
  if (e.length === 0)
    return; let r = e[0]; for (let n = 1; n < e.length; n++)t(r, e[n]) < 0 && (r = e[n]); return r
}f(); u(); c(); p(); m(); function N(e, t) { Object.defineProperty(e, 'name', { value: t, configurable: !0 }) }f(); u(); c(); p(); m(); const eo = new Set(); function mr(e, t, ...r) { eo.has(e) || (eo.add(e), fn(t, ...r)) } const Q = class e extends Error {clientVersion; errorCode; retryable; constructor(t, r, n) { super(t), this.name = 'PrismaClientInitializationError', this.clientVersion = r, this.errorCode = n, Error.captureStackTrace(e) } get [Symbol.toStringTag]() { return 'PrismaClientInitializationError' }}; N(Q, 'PrismaClientInitializationError'); f(); u(); c(); p(); m(); const oe = class extends Error {code; meta; clientVersion; batchRequestIdx; constructor(t, { code: r, clientVersion: n, meta: i, batchRequestIdx: o }) { super(t), this.name = 'PrismaClientKnownRequestError', this.code = r, this.clientVersion = n, this.meta = i, Object.defineProperty(this, 'batchRequestIdx', { value: o, enumerable: !1, writable: !0 }) } get [Symbol.toStringTag]() { return 'PrismaClientKnownRequestError' }}; N(oe, 'PrismaClientKnownRequestError'); f(); u(); c(); p(); m(); const Re = class extends Error {clientVersion; constructor(t, r) { super(t), this.name = 'PrismaClientRustPanicError', this.clientVersion = r } get [Symbol.toStringTag]() { return 'PrismaClientRustPanicError' }}; N(Re, 'PrismaClientRustPanicError'); f(); u(); c(); p(); m(); const se = class extends Error {clientVersion; batchRequestIdx; constructor(t, { clientVersion: r, batchRequestIdx: n }) { super(t), this.name = 'PrismaClientUnknownRequestError', this.clientVersion = r, Object.defineProperty(this, 'batchRequestIdx', { value: n, writable: !0, enumerable: !1 }) } get [Symbol.toStringTag]() { return 'PrismaClientUnknownRequestError' }}; N(se, 'PrismaClientUnknownRequestError'); f(); u(); c(); p(); m(); const X = class extends Error {name = 'PrismaClientValidationError'; clientVersion; constructor(t, { clientVersion: r }) { super(t), this.clientVersion = r } get [Symbol.toStringTag]() { return 'PrismaClientValidationError' }}; N(X, 'PrismaClientValidationError'); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Xe = 9e15; const Oe = 1e9; const hn = '0123456789abcdef'; let gr = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058'; let hr = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789'; const yn = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -Xe, maxE: Xe, crypto: !1 }; let oo; let Pe; let _ = !0; const wr = '[DecimalError] '; const Ie = `${wr}Invalid argument: `; const so = `${wr}Precision limit exceeded`; const ao = `${wr}crypto unavailable`; const lo = '[object Decimal]'; const Z = Math.floor; const J = Math.pow; const wl = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i; const El = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i; const bl = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i; const uo = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i; const ce = 1e7; const O = 7; const xl = 9007199254740991; const Pl = gr.length - 1; const wn = hr.length - 1; const C = { toStringTag: lo }; C.absoluteValue = C.abs = function () { const e = new this.constructor(this); return e.s < 0 && (e.s = 1), I(e) }; C.ceil = function () { return I(new this.constructor(this), this.e + 1, 2) }; C.clampedTo = C.clamp = function (e, t) {
  let r; const n = this; const i = n.constructor; if (e = new i(e), t = new i(t), !e.s || !t.s)
    return new i(Number.NaN); if (e.gt(t))
    throw new Error(Ie + t); return r = n.cmp(e), r < 0 ? e : n.cmp(t) > 0 ? t : new i(n)
}; C.comparedTo = C.cmp = function (e) {
  let t; let r; let n; let i; const o = this; const s = o.d; const a = (e = new o.constructor(e)).d; const l = o.s; const d = e.s; if (!s || !a)
    return !l || !d ? Number.NaN : l !== d ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1; if (!s[0] || !a[0])
    return s[0] ? l : a[0] ? -d : 0; if (l !== d)
    return l; if (o.e !== e.e)
    return o.e > e.e ^ l < 0 ? 1 : -1; for (n = s.length, i = a.length, t = 0, r = n < i ? n : i; t < r; ++t) {
    if (s[t] !== a[t])
      return s[t] > a[t] ^ l < 0 ? 1 : -1
  } return n === i ? 0 : n > i ^ l < 0 ? 1 : -1
}; C.cosine = C.cos = function () { let e; let t; let r = this; const n = r.constructor; return r.d ? r.d[0] ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + O, n.rounding = 1, r = vl(n, go(n, r)), n.precision = e, n.rounding = t, I(Pe == 2 || Pe == 3 ? r.neg() : r, e, t, !0)) : new n(1) : new n(Number.NaN) }; C.cubeRoot = C.cbrt = function () {
  let e; let t; let r; let n; let i; let o; let s; let a; let l; let d; const g = this; const h = g.constructor; if (!g.isFinite() || g.isZero())
    return new h(g); for (_ = !1, o = g.s * (g.s * g) ** (1 / 3), !o || Math.abs(o) == 1 / 0 ? (r = K(g.d), e = g.e, (o = (e - r.length + 1) % 3) && (r += o == 1 || o == -2 ? '0' : '00'), o = r ** (1 / 3), e = Z((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? r = `5e${e}` : (r = o.toExponential(), r = r.slice(0, r.indexOf('e') + 1) + e), n = new h(r), n.s = g.s) : n = new h(o.toString()), s = (e = h.precision) + 3; ;) {
    if (a = n, l = a.times(a).times(a), d = l.plus(g), n = U(d.plus(g).times(a), d.plus(l), s + 2, 1), K(a.d).slice(0, s) === (r = K(n.d)).slice(0, s)) {
      if (r = r.slice(s - 3, s + 1), r == '9999' || !i && r == '4999') { if (!i && (I(a, e + 1, 0), a.times(a).times(a).eq(g))) { n = a; break }s += 4, i = 1 }
      else { (!+r || !+r.slice(1) && r.charAt(0) == '5') && (I(n, e + 1, 1), t = !n.times(n).times(n).eq(g)); break }
    }
  } return _ = !0, I(n, e, h.rounding, t)
}; C.decimalPlaces = C.dp = function () {
  let e; const t = this.d; let r = Number.NaN; if (t) {
    if (e = t.length - 1, r = (e - Z(this.e / O)) * O, e = t[e], e) {
      for (;e % 10 == 0; e /= 10)r--
    } r < 0 && (r = 0)
  } return r
}; C.dividedBy = C.div = function (e) { return U(this, new this.constructor(e)) }; C.dividedToIntegerBy = C.divToInt = function (e) { const t = this; const r = t.constructor; return I(U(t, new r(e), 0, 1, 1), r.precision, r.rounding) }; C.equals = C.eq = function (e) { return this.cmp(e) === 0 }; C.floor = function () { return I(new this.constructor(this), this.e + 1, 3) }; C.greaterThan = C.gt = function (e) { return this.cmp(e) > 0 }; C.greaterThanOrEqualTo = C.gte = function (e) { const t = this.cmp(e); return t == 1 || t === 0 }; C.hyperbolicCosine = C.cosh = function () {
  let e; let t; let r; let n; let i; let o = this; const s = o.constructor; const a = new s(1); if (!o.isFinite())
    return new s(o.s ? 1 / 0 : Number.NaN); if (o.isZero())
    return a; r = s.precision, n = s.rounding, s.precision = r + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), t = (1 / br(4, e)).toString()) : (e = 16, t = '2.3283064365386962890625e-10'), o = et(s, 1, o.times(t), new s(1), !0); for (var l, d = e, g = new s(8); d--;)l = o.times(o), o = a.minus(l.times(g.minus(l.times(g)))); return I(o, s.precision = r, s.rounding = n, !0)
}; C.hyperbolicSine = C.sinh = function () {
  let e; let t; let r; let n; let i = this; const o = i.constructor; if (!i.isFinite() || i.isZero())
    return new o(i); if (t = o.precision, r = o.rounding, o.precision = t + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) {
    i = et(o, 2, i, i, !0)
  }
  else { e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / br(5, e)), i = et(o, 2, i, i, !0); for (var s, a = new o(5), l = new o(16), d = new o(20); e--;)s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(d)))) } return o.precision = t, o.rounding = r, I(i, t, r, !0)
}; C.hyperbolicTangent = C.tanh = function () { let e; let t; const r = this; const n = r.constructor; return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 7, n.rounding = 1, U(r.sinh(), r.cosh(), n.precision = e, n.rounding = t)) : new n(r.s) }; C.inverseCosine = C.acos = function () { let e = this; const t = e.constructor; const r = e.abs().cmp(1); const n = t.precision; const i = t.rounding; return r !== -1 ? r === 0 ? e.isNeg() ? de(t, n, i) : new t(0) : new t(Number.NaN) : e.isZero() ? de(t, n + 4, i).times(0.5) : (t.precision = n + 6, t.rounding = 1, e = new t(1).minus(e).div(e.plus(1)).sqrt().atan(), t.precision = n, t.rounding = i, e.times(2)) }; C.inverseHyperbolicCosine = C.acosh = function () { let e; let t; let r = this; const n = r.constructor; return r.lte(1) ? new n(r.eq(1) ? 0 : Number.NaN) : r.isFinite() ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(Math.abs(r.e), r.sd()) + 4, n.rounding = 1, _ = !1, r = r.times(r).minus(1).sqrt().plus(r), _ = !0, n.precision = e, n.rounding = t, r.ln()) : new n(r) }; C.inverseHyperbolicSine = C.asinh = function () { let e; let t; let r = this; const n = r.constructor; return !r.isFinite() || r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n.rounding = 1, _ = !1, r = r.times(r).plus(1).sqrt().plus(r), _ = !0, n.precision = e, n.rounding = t, r.ln()) }; C.inverseHyperbolicTangent = C.atanh = function () { let e; let t; let r; let n; let i = this; const o = i.constructor; return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : Number.NaN) : (e = o.precision, t = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? I(new o(i), e, t, !0) : (o.precision = r = n - i.e, i = U(i.plus(1), new o(1).minus(i), r + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = t, i.times(0.5))) : new o(Number.NaN) }; C.inverseSine = C.asin = function () { let e; let t; let r; let n; let i = this; const o = i.constructor; return i.isZero() ? new o(i) : (t = i.abs().cmp(1), r = o.precision, n = o.rounding, t !== -1 ? t === 0 ? (e = de(o, r + 4, n).times(0.5), e.s = i.s, e) : new o(Number.NaN) : (o.precision = r + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = r, o.rounding = n, i.times(2))) }; C.inverseTangent = C.atan = function () {
  let e; let t; let r; let n; let i; let o; let s; let a; let l; let d = this; const g = d.constructor; const h = g.precision; const v = g.rounding; if (d.isFinite()) {
    if (d.isZero())
      return new g(d); if (d.abs().eq(1) && h + 4 <= wn)
      return s = de(g, h + 4, v).times(0.25), s.s = d.s, s
  }
  else {
    if (!d.s)
      return new g(Number.NaN); if (h + 4 <= wn)
      return s = de(g, h + 4, v).times(0.5), s.s = d.s, s
  } for (g.precision = a = h + 10, g.rounding = 1, r = Math.min(28, a / O + 2 | 0), e = r; e; --e)d = d.div(d.times(d).plus(1).sqrt().plus(1)); for (_ = !1, t = Math.ceil(a / O), n = 1, l = d.times(d), s = new g(d), i = d; e !== -1;) {
    if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[t] !== void 0) {
      for (e = t; s.d[e] === o.d[e] && e--;);
    }
  } return r && (s = s.times(2 << r - 1)), _ = !0, I(s, g.precision = h, g.rounding = v, !0)
}; C.isFinite = function () { return !!this.d }; C.isInteger = C.isInt = function () { return !!this.d && Z(this.e / O) > this.d.length - 2 }; C.isNaN = function () { return !this.s }; C.isNegative = C.isNeg = function () { return this.s < 0 }; C.isPositive = C.isPos = function () { return this.s > 0 }; C.isZero = function () { return !!this.d && this.d[0] === 0 }; C.lessThan = C.lt = function (e) { return this.cmp(e) < 0 }; C.lessThanOrEqualTo = C.lte = function (e) { return this.cmp(e) < 1 }; C.logarithm = C.log = function (e) {
  let t; let r; let n; let i; let o; let s; let a; let l; const d = this; const g = d.constructor; const h = g.precision; const v = g.rounding; const S = 5; if (e == null) {
    e = new g(10), t = !0
  }
  else {
    if (e = new g(e), r = e.d, e.s < 0 || !r || !r[0] || e.eq(1))
      return new g(Number.NaN); t = e.eq(10)
  } if (r = d.d, d.s < 0 || !r || !r[0] || d.eq(1))
    return new g(r && !r[0] ? -1 / 0 : d.s != 1 ? Number.NaN : r ? 0 : 1 / 0); if (t) {
    if (r.length > 1) {
      o = !0
    }
    else { for (i = r[0]; i % 10 === 0;)i /= 10; o = i !== 1 }
  } if (_ = !1, a = h + S, s = ke(d, a), n = t ? yr(g, a + 10) : ke(e, a), l = U(s, n, a, 1), Tt(l.d, i = h, v)) {
    do {
      if (a += 10, s = ke(d, a), n = t ? yr(g, a + 10) : ke(e, a), l = U(s, n, a, 1), !o) { +K(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = I(l, h + 1, 0)); break }
    } while (Tt(l.d, i += 10, v))
  } return _ = !0, I(l, h, v)
}; C.minus = C.sub = function (e) {
  let t; let r; let n; let i; let o; let s; let a; let l; let d; let g; let h; let v; const S = this; const A = S.constructor; if (e = new A(e), !S.d || !e.d)
    return !S.s || !e.s ? e = new A(Number.NaN) : S.d ? e.s = -e.s : e = new A(e.d || S.s !== e.s ? S : Number.NaN), e; if (S.s != e.s)
    return e.s = -e.s, S.plus(e); if (d = S.d, v = e.d, a = A.precision, l = A.rounding, !d[0] || !v[0]) {
    if (v[0])
      e.s = -e.s; else if (d[0])
      e = new A(S); else return new A(l === 3 ? -0 : 0); return _ ? I(e, a, l) : e
  } if (r = Z(e.e / O), g = Z(S.e / O), d = d.slice(), o = g - r, o) { for (h = o < 0, h ? (t = d, o = -o, s = v.length) : (t = v, r = g, s = d.length), n = Math.max(Math.ceil(a / O), s) + 2, o > n && (o = n, t.length = 1), t.reverse(), n = o; n--;)t.push(0); t.reverse() }
  else {
    for (n = d.length, s = v.length, h = n < s, h && (s = n), n = 0; n < s; n++) {
      if (d[n] != v[n]) { h = d[n] < v[n]; break }
    }o = 0
  } for (h && (t = d, d = v, v = t, e.s = -e.s), s = d.length, n = v.length - s; n > 0; --n)d[s++] = 0; for (n = v.length; n > o;) { if (d[--n] < v[n]) { for (i = n; i && d[--i] === 0;)d[i] = ce - 1; --d[i], d[n] += ce }d[n] -= v[n] } for (;d[--s] === 0;)d.pop(); for (;d[0] === 0; d.shift())--r; return d[0] ? (e.d = d, e.e = Er(d, r), _ ? I(e, a, l) : e) : new A(l === 3 ? -0 : 0)
}; C.modulo = C.mod = function (e) { let t; const r = this; const n = r.constructor; return e = new n(e), !r.d || !e.s || e.d && !e.d[0] ? new n(Number.NaN) : !e.d || r.d && !r.d[0] ? I(new n(r), n.precision, n.rounding) : (_ = !1, n.modulo == 9 ? (t = U(r, e.abs(), 0, 3, 1), t.s *= e.s) : t = U(r, e, 0, n.modulo, 1), t = t.times(e), _ = !0, r.minus(t)) }; C.naturalExponential = C.exp = function () { return En(this) }; C.naturalLogarithm = C.ln = function () { return ke(this) }; C.negated = C.neg = function () { const e = new this.constructor(this); return e.s = -e.s, I(e) }; C.plus = C.add = function (e) {
  let t; let r; let n; let i; let o; let s; let a; let l; let d; let g; const h = this; const v = h.constructor; if (e = new v(e), !h.d || !e.d)
    return !h.s || !e.s ? e = new v(Number.NaN) : h.d || (e = new v(e.d || h.s === e.s ? h : Number.NaN)), e; if (h.s != e.s)
    return e.s = -e.s, h.minus(e); if (d = h.d, g = e.d, a = v.precision, l = v.rounding, !d[0] || !g[0])
    return g[0] || (e = new v(h)), _ ? I(e, a, l) : e; if (o = Z(h.e / O), n = Z(e.e / O), d = d.slice(), i = o - n, i) { for (i < 0 ? (r = d, i = -i, s = g.length) : (r = g, n = o, s = d.length), o = Math.ceil(a / O), s = o > s ? o + 1 : s + 1, i > s && (i = s, r.length = 1), r.reverse(); i--;)r.push(0); r.reverse() } for (s = d.length, i = g.length, s - i < 0 && (i = s, r = g, g = d, d = r), t = 0; i;)t = (d[--i] = d[i] + g[i] + t) / ce | 0, d[i] %= ce; for (t && (d.unshift(t), ++n), s = d.length; d[--s] == 0;)d.pop(); return e.d = d, e.e = Er(d, n), _ ? I(e, a, l) : e
}; C.precision = C.sd = function (e) {
  let t; const r = this; if (e !== void 0 && e !== !!e && e !== 1 && e !== 0)
    throw new Error(Ie + e); return r.d ? (t = co(r.d), e && r.e + 1 > t && (t = r.e + 1)) : t = Number.NaN, t
}; C.round = function () { const e = this; const t = e.constructor; return I(new t(e), e.e + 1, t.rounding) }; C.sine = C.sin = function () { let e; let t; let r = this; const n = r.constructor; return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + O, n.rounding = 1, r = Cl(n, go(n, r)), n.precision = e, n.rounding = t, I(Pe > 2 ? r.neg() : r, e, t, !0)) : new n(Number.NaN) }; C.squareRoot = C.sqrt = function () {
  let e; let t; let r; let n; let i; let o; const s = this; const a = s.d; let l = s.e; let d = s.s; const g = s.constructor; if (d !== 1 || !a || !a[0])
    return new g(!d || d < 0 && (!a || a[0]) ? Number.NaN : a ? s : 1 / 0); for (_ = !1, d = Math.sqrt(+s), d == 0 || d == 1 / 0 ? (t = K(a), (t.length + l) % 2 == 0 && (t += '0'), d = Math.sqrt(t), l = Z((l + 1) / 2) - (l < 0 || l % 2), d == 1 / 0 ? t = `5e${l}` : (t = d.toExponential(), t = t.slice(0, t.indexOf('e') + 1) + l), n = new g(t)) : n = new g(d.toString()), r = (l = g.precision) + 3; ;) {
    if (o = n, n = o.plus(U(s, o, r + 2, 1)).times(0.5), K(o.d).slice(0, r) === (t = K(n.d)).slice(0, r)) {
      if (t = t.slice(r - 3, r + 1), t == '9999' || !i && t == '4999') { if (!i && (I(o, l + 1, 0), o.times(o).eq(s))) { n = o; break }r += 4, i = 1 }
      else { (!+t || !+t.slice(1) && t.charAt(0) == '5') && (I(n, l + 1, 1), e = !n.times(n).eq(s)); break }
    }
  } return _ = !0, I(n, l, g.rounding, e)
}; C.tangent = C.tan = function () { let e; let t; let r = this; const n = r.constructor; return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 10, n.rounding = 1, r = r.sin(), r.s = 1, r = U(r, new n(1).minus(r.times(r)).sqrt(), e + 10, 0), n.precision = e, n.rounding = t, I(Pe == 2 || Pe == 4 ? r.neg() : r, e, t, !0)) : new n(Number.NaN) }; C.times = C.mul = function (e) {
  let t; let r; let n; let i; let o; let s; let a; let l; let d; const g = this; const h = g.constructor; let v = g.d; let S = (e = new h(e)).d; if (e.s *= g.s, !v || !v[0] || !S || !S[0])
    return new h(!e.s || v && !v[0] && !S || S && !S[0] && !v ? Number.NaN : !v || !S ? e.s / 0 : e.s * 0); for (r = Z(g.e / O) + Z(e.e / O), l = v.length, d = S.length, l < d && (o = v, v = S, S = o, s = l, l = d, d = s), o = [], s = l + d, n = s; n--;)o.push(0); for (n = d; --n >= 0;) { for (t = 0, i = l + n; i > n;)a = o[i] + S[n] * v[i - n - 1] + t, o[i--] = a % ce | 0, t = a / ce | 0; o[i] = (o[i] + t) % ce | 0 } for (;!o[--s];)o.pop(); return t ? ++r : o.shift(), e.d = o, e.e = Er(o, r), _ ? I(e, h.precision, h.rounding) : e
}; C.toBinary = function (e, t) { return bn(this, 2, e, t) }; C.toDecimalPlaces = C.toDP = function (e, t) { let r = this; const n = r.constructor; return r = new n(r), e === void 0 ? r : (re(e, 0, Oe), t === void 0 ? t = n.rounding : re(t, 0, 8), I(r, e + r.e + 1, t)) }; C.toExponential = function (e, t) { let r; let n = this; const i = n.constructor; return e === void 0 ? r = ge(n, !0) : (re(e, 0, Oe), t === void 0 ? t = i.rounding : re(t, 0, 8), n = I(new i(n), e + 1, t), r = ge(n, !0, e + 1)), n.isNeg() && !n.isZero() ? `-${r}` : r }; C.toFixed = function (e, t) { let r; let n; const i = this; const o = i.constructor; return e === void 0 ? r = ge(i) : (re(e, 0, Oe), t === void 0 ? t = o.rounding : re(t, 0, 8), n = I(new o(i), e + i.e + 1, t), r = ge(n, !1, e + n.e + 1)), i.isNeg() && !i.isZero() ? `-${r}` : r }; C.toFraction = function (e) {
  let t; let r; let n; let i; let o; let s; let a; let l; let d; let g; let h; let v; const S = this; const A = S.d; const R = S.constructor; if (!A)
    return new R(S); if (d = r = new R(1), n = l = new R(0), t = new R(n), o = t.e = co(A) - S.e - 1, s = o % O, t.d[0] = 10 ** (s < 0 ? O + s : s), e == null) {
    e = o > 0 ? t : d
  }
  else {
    if (a = new R(e), !a.isInt() || a.lt(d))
      throw new Error(Ie + a); e = a.gt(t) ? o > 0 ? t : d : a
  } for (_ = !1, a = new R(K(A)), g = R.precision, R.precision = o = A.length * O * 2; h = U(a, t, 0, 1, 1), i = r.plus(h.times(n)), i.cmp(e) != 1;)r = n, n = i, i = d, d = l.plus(h.times(i)), l = i, i = t, t = a.minus(h.times(i)), a = i; return i = U(e.minus(r), n, 0, 1, 1), l = l.plus(i.times(d)), r = r.plus(i.times(n)), l.s = d.s = S.s, v = U(d, n, o, 1).minus(S).abs().cmp(U(l, r, o, 1).minus(S).abs()) < 1 ? [d, n] : [l, r], R.precision = g, _ = !0, v
}; C.toHexadecimal = C.toHex = function (e, t) { return bn(this, 16, e, t) }; C.toNearest = function (e, t) {
  let r = this; const n = r.constructor; if (r = new n(r), e == null) {
    if (!r.d)
      return r; e = new n(1), t = n.rounding
  }
  else {
    if (e = new n(e), t === void 0 ? t = n.rounding : re(t, 0, 8), !r.d)
      return e.s ? r : e; if (!e.d)
      return e.s && (e.s = r.s), e
  } return e.d[0] ? (_ = !1, r = U(r, e, 0, t, 1).times(e), _ = !0, I(r)) : (e.s = r.s, r = e), r
}; C.toNumber = function () { return +this }; C.toOctal = function (e, t) { return bn(this, 8, e, t) }; C.toPower = C.pow = function (e) {
  let t; let r; let n; let i; let o; let s; let a = this; const l = a.constructor; const d = +(e = new l(e)); if (!a.d || !e.d || !a.d[0] || !e.d[0])
    return new l((+a) ** d); if (a = new l(a), a.eq(1))
    return a; if (n = l.precision, o = l.rounding, e.eq(1))
    return I(a, n, o); if (t = Z(e.e / O), t >= e.d.length - 1 && (r = d < 0 ? -d : d) <= xl)
    return i = po(l, a, r, n), e.s < 0 ? new l(1).div(i) : I(i, n, o); if (s = a.s, s < 0) {
    if (t < e.d.length - 1)
      return new l(Number.NaN); if ((e.d[t] & 1) == 0 && (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1)
      return a.s = s, a
  } return r = (+a) ** d, t = r == 0 || !isFinite(r) ? Z(d * (Math.log(`0.${K(a.d)}`) / Math.LN10 + a.e + 1)) : new l(`${r}`).e, t > l.maxE + 1 || t < l.minE - 1 ? new l(t > 0 ? s / 0 : 0) : (_ = !1, l.rounding = a.s = 1, r = Math.min(12, (`${t}`).length), i = En(e.times(ke(a, n + r)), n), i.d && (i = I(i, n + 5, 1), Tt(i.d, n, o) && (t = n + 10, i = I(En(e.times(ke(a, t + r)), t), t + 5, 1), +K(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = I(i, n + 1, 0)))), i.s = s, _ = !0, l.rounding = o, I(i, n, o))
}; C.toPrecision = function (e, t) { let r; let n = this; const i = n.constructor; return e === void 0 ? r = ge(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (re(e, 1, Oe), t === void 0 ? t = i.rounding : re(t, 0, 8), n = I(new i(n), e, t), r = ge(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? `-${r}` : r }; C.toSignificantDigits = C.toSD = function (e, t) { const r = this; const n = r.constructor; return e === void 0 ? (e = n.precision, t = n.rounding) : (re(e, 1, Oe), t === void 0 ? t = n.rounding : re(t, 0, 8)), I(new n(r), e, t) }; C.toString = function () { const e = this; const t = e.constructor; const r = ge(e, e.e <= t.toExpNeg || e.e >= t.toExpPos); return e.isNeg() && !e.isZero() ? `-${r}` : r }; C.truncated = C.trunc = function () { return I(new this.constructor(this), this.e + 1, 1) }; C.valueOf = C.toJSON = function () { const e = this; const t = e.constructor; const r = ge(e, e.e <= t.toExpNeg || e.e >= t.toExpPos); return e.isNeg() ? `-${r}` : r }; function K(e) {
  let t; let r; let n; const i = e.length - 1; let o = ''; let s = e[0]; if (i > 0) { for (o += s, t = 1; t < i; t++)n = `${e[t]}`, r = O - n.length, r && (o += Se(r)), o += n; s = e[t], n = `${s}`, r = O - n.length, r && (o += Se(r)) }
  else if (s === 0) {
    return '0'
  } for (;s % 10 === 0;)s /= 10; return o + s
} function re(e, t, r) {
  if (e !== ~~e || e < t || e > r)
    throw new Error(Ie + e)
} function Tt(e, t, r, n) { let i, o, s, a; for (o = e[0]; o >= 10; o /= 10)--t; return --t < 0 ? (t += O, i = 0) : (i = Math.ceil((t + 1) / O), t %= O), o = 10 ** (O - t), a = e[i] % o | 0, n == null ? t < 3 ? (t == 0 ? a = a / 100 | 0 : t == 1 && (a = a / 10 | 0), s = r < 4 && a == 99999 || r > 3 && a == 49999 || a == 5e4 || a == 0) : s = (r < 4 && a + 1 == o || r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == 10 ** (t - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : t < 4 ? (t == 0 ? a = a / 1e3 | 0 : t == 1 ? a = a / 100 | 0 : t == 2 && (a = a / 10 | 0), s = (n || r < 4) && a == 9999 || !n && r > 3 && a == 4999) : s = ((n || r < 4) && a + 1 == o || !n && r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == 10 ** (t - 3) - 1, s } function fr(e, t, r) { for (var n, i = [0], o, s = 0, a = e.length; s < a;) { for (o = i.length; o--;)i[o] *= t; for (i[0] += hn.indexOf(e.charAt(s++)), n = 0; n < i.length; n++)i[n] > r - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / r | 0, i[n] %= r) } return i.reverse() } function vl(e, t) {
  let r, n, i; if (t.isZero())
    return t; n = t.d.length, n < 32 ? (r = Math.ceil(n / 3), i = (1 / br(4, r)).toString()) : (r = 16, i = '2.3283064365386962890625e-10'), e.precision += r, t = et(e, 1, t.times(i), new e(1)); for (let o = r; o--;) { const s = t.times(t); t = s.times(s).minus(s).times(8).plus(1) } return e.precision -= r, t
} var U = (function () {
  function e(n, i, o) { let s; let a = 0; let l = n.length; for (n = n.slice(); l--;)s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0; return a && n.unshift(a), n } function t(n, i, o, s) {
    let a, l; if (o != s) {
      l = o > s ? 1 : -1
    }
    else {
      for (a = l = 0; a < o; a++) {
        if (n[a] != i[a]) { l = n[a] > i[a] ? 1 : -1; break }
      }
    } return l
  } function r(n, i, o, s) { for (let a = 0; o--;)n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o]; for (;!n[0] && n.length > 1;)n.shift() } return function (n, i, o, s, a, l) {
    let d; let g; let h; let v; let S; let A; let R; let D; let M; let B; let k; let F; let ie; let G; let Yr; let tr; let Et; let Zr; let ue; let rr; const nr = n.constructor; const Xr = n.s == i.s ? 1 : -1; let z = n.d; let $ = i.d; if (!z || !z[0] || !$ || !$[0])
      return new nr(!n.s || !i.s || (z ? $ && z[0] == $[0] : !$) ? Number.NaN : z && z[0] == 0 || !$ ? Xr * 0 : Xr / 0); for (l ? (S = 1, g = n.e - i.e) : (l = ce, S = O, g = Z(n.e / S) - Z(i.e / S)), ue = $.length, Et = z.length, M = new nr(Xr), B = M.d = [], h = 0; $[h] == (z[h] || 0); h++);if ($[h] > (z[h] || 0) && g--, o == null ? (G = o = nr.precision, s = nr.rounding) : a ? G = o + (n.e - i.e) + 1 : G = o, G < 0) {
      B.push(1), A = !0
    }
    else {
      if (G = G / S + 2 | 0, h = 0, ue == 1) { for (v = 0, $ = $[0], G++; (h < Et || v) && G--; h++)Yr = v * l + (z[h] || 0), B[h] = Yr / $ | 0, v = Yr % $ | 0; A = v || h < Et }
      else { for (v = l / ($[0] + 1) | 0, v > 1 && ($ = e($, v, l), z = e(z, v, l), ue = $.length, Et = z.length), tr = ue, k = z.slice(0, ue), F = k.length; F < ue;)k[F++] = 0; rr = $.slice(), rr.unshift(0), Zr = $[0], $[1] >= l / 2 && ++Zr; do v = 0, d = t($, k, ue, F), d < 0 ? (ie = k[0], ue != F && (ie = ie * l + (k[1] || 0)), v = ie / Zr | 0, v > 1 ? (v >= l && (v = l - 1), R = e($, v, l), D = R.length, F = k.length, d = t(R, k, D, F), d == 1 && (v--, r(R, ue < D ? rr : $, D, l))) : (v == 0 && (d = v = 1), R = $.slice()), D = R.length, D < F && R.unshift(0), r(k, R, F, l), d == -1 && (F = k.length, d = t($, k, ue, F), d < 1 && (v++, r(k, ue < F ? rr : $, F, l))), F = k.length) : d === 0 && (v++, k = [0]), B[h++] = v, d && k[0] ? k[F++] = z[tr] || 0 : (k = [z[tr]], F = 1); while ((tr++ < Et || k[0] !== void 0) && G--); A = k[0] !== void 0 }B[0] || B.shift()
    } if (S == 1) {
      M.e = g, oo = A
    }
    else { for (h = 1, v = B[0]; v >= 10; v /= 10)h++; M.e = h + g * S - 1, I(M, a ? o + M.e + 1 : o, s, A) } return M
  }
}()); function I(e, t, r, n) {
  let i; let o; let s; let a; let l; let d; let g; let h; let v; const S = e.constructor; e:if (t != null) {
    if (h = e.d, !h)
      return e; for (i = 1, a = h[0]; a >= 10; a /= 10)i++; if (o = t - i, o < 0) {
      o += O, s = t, g = h[v = 0], l = g / 10 ** (i - s - 1) % 10 | 0
    }
    else if (v = Math.ceil((o + 1) / O), a = h.length, v >= a) {
      if (n) { for (;a++ <= v;)h.push(0); g = l = 0, i = 1, o %= O, s = o - O + 1 }
      else {
        break e
      }
    }
    else { for (g = a = h[v], i = 1; a >= 10; a /= 10)i++; o %= O, s = o - O + i, l = s < 0 ? 0 : g / 10 ** (i - s - 1) % 10 | 0 } if (n = n || t < 0 || h[v + 1] !== void 0 || (s < 0 ? g : g % 10 ** (i - s - 1)), d = r < 4 ? (l || n) && (r == 0 || r == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (r == 4 || n || r == 6 && (o > 0 ? s > 0 ? g / 10 ** (i - s) : 0 : h[v - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !h[0])
      return h.length = 0, d ? (t -= e.e + 1, h[0] = 10 ** ((O - t % O) % O), e.e = -t || 0) : h[0] = e.e = 0, e; if (o == 0 ? (h.length = v, a = 1, v--) : (h.length = v + 1, a = 10 ** (O - o), h[v] = s > 0 ? (g / 10 ** (i - s) % 10 ** s | 0) * a : 0), d) {
      for (;;) {
        if (v == 0) { for (o = 1, s = h[0]; s >= 10; s /= 10)o++; for (s = h[0] += a, a = 1; s >= 10; s /= 10)a++; o != a && (e.e++, h[0] == ce && (h[0] = 1)); break }
        else {
          if (h[v] += a, h[v] != ce)
            break; h[v--] = 0, a = 1
        }
      }
    } for (o = h.length; h[--o] === 0;)h.pop()
  } return _ && (e.e > S.maxE ? (e.d = null, e.e = Number.NaN) : e.e < S.minE && (e.e = 0, e.d = [0])), e
} function ge(e, t, r) {
  if (!e.isFinite())
    return fo(e); let n; const i = e.e; let o = K(e.d); const s = o.length; return t ? (r && (n = r - s) > 0 ? o = `${o.charAt(0)}.${o.slice(1)}${Se(n)}` : s > 1 && (o = `${o.charAt(0)}.${o.slice(1)}`), o = o + (e.e < 0 ? 'e' : 'e+') + e.e) : i < 0 ? (o = `0.${Se(-i - 1)}${o}`, r && (n = r - s) > 0 && (o += Se(n))) : i >= s ? (o += Se(i + 1 - s), r && (n = r - i - 1) > 0 && (o = `${o}.${Se(n)}`)) : ((n = i + 1) < s && (o = `${o.slice(0, n)}.${o.slice(n)}`), r && (n = r - s) > 0 && (i + 1 === s && (o += '.'), o += Se(n))), o
} function Er(e, t) { let r = e[0]; for (t *= O; r >= 10; r /= 10)t++; return t } function yr(e, t, r) {
  if (t > Pl)
    throw _ = !0, r && (e.precision = r), new Error(so); return I(new e(gr), t, 1, !0)
} function de(e, t, r) {
  if (t > wn)
    throw new Error(so); return I(new e(hr), t, r, !0)
} function co(e) { let t = e.length - 1; let r = t * O + 1; if (t = e[t], t) { for (;t % 10 == 0; t /= 10)r--; for (t = e[0]; t >= 10; t /= 10)r++ } return r } function Se(e) { for (var t = ''; e--;)t += '0'; return t } function po(e, t, r, n) { let i; let o = new e(1); const s = Math.ceil(n / O + 4); for (_ = !1; ;) { if (r % 2 && (o = o.times(t), no(o.d, s) && (i = !0)), r = Z(r / 2), r === 0) { r = o.d.length - 1, i && o.d[r] === 0 && ++o.d[r]; break }t = t.times(t), no(t.d, s) } return _ = !0, o } function ro(e) { return e.d[e.d.length - 1] & 1 } function mo(e, t, r) { for (var n, i, o = new e(t[0]), s = 0; ++s < t.length;) { if (i = new e(t[s]), !i.s) { o = i; break }n = o.cmp(i), (n === r || n === 0 && o.s === r) && (o = i) } return o } function En(e, t) {
  let r; let n; let i; let o; let s; let a; let l; let d = 0; let g = 0; let h = 0; const v = e.constructor; const S = v.rounding; const A = v.precision; if (!e.d || !e.d[0] || e.e > 17)
    return new v(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : Number.NaN); for (t == null ? (_ = !1, l = A) : l = t, a = new v(0.03125); e.e > -2;)e = e.times(a), h += 5; for (n = Math.log(2 ** h) / Math.LN10 * 2 + 5 | 0, l += n, r = o = s = new v(1), v.precision = l; ;) {
    if (o = I(o.times(e), l, 1), r = r.times(++g), a = s.plus(U(o, r, l, 1)), K(a.d).slice(0, l) === K(s.d).slice(0, l)) {
      for (i = h; i--;)s = I(s.times(s), l, 1); if (t == null) {
        if (d < 3 && Tt(s.d, l - n, S, d))
          v.precision = l += 10, r = o = a = new v(1), g = 0, d++; else return I(s, v.precision = A, S, _ = !0)
      }
      else {
        return v.precision = A, s
      }
    }s = a
  }
} function ke(e, t) {
  let r; let n; let i; let o; let s; let a; let l; let d; let g; let h; let v; let S = 1; const A = 10; let R = e; const D = R.d; const M = R.constructor; const B = M.rounding; const k = M.precision; if (R.s < 0 || !D || !D[0] || !R.e && D[0] == 1 && D.length == 1)
    return new M(D && !D[0] ? -1 / 0 : R.s != 1 ? Number.NaN : D ? 0 : R); if (t == null ? (_ = !1, g = k) : g = t, M.precision = g += A, r = K(D), n = r.charAt(0), Math.abs(o = R.e) < 15e14) { for (;n < 7 && n != 1 || n == 1 && r.charAt(1) > 3;)R = R.times(e), r = K(R.d), n = r.charAt(0), S++; o = R.e, n > 1 ? (R = new M(`0.${r}`), o++) : R = new M(`${n}.${r.slice(1)}`) }
  else {
    return d = yr(M, g + 2, k).times(`${o}`), R = ke(new M(`${n}.${r.slice(1)}`), g - A).plus(d), M.precision = k, t == null ? I(R, k, B, _ = !0) : R
  } for (h = R, l = s = R = U(R.minus(1), R.plus(1), g, 1), v = I(R.times(R), g, 1), i = 3; ;) {
    if (s = I(s.times(v), g, 1), d = l.plus(U(s, new M(i), g, 1)), K(d.d).slice(0, g) === K(l.d).slice(0, g)) {
      if (l = l.times(2), o !== 0 && (l = l.plus(yr(M, g + 2, k).times(`${o}`))), l = U(l, new M(S), g, 1), t == null) {
        if (Tt(l.d, g - A, B, a))
          M.precision = g += A, d = s = R = U(h.minus(1), h.plus(1), g, 1), v = I(R.times(R), g, 1), i = a = 1; else return I(l, M.precision = k, B, _ = !0)
      }
      else {
        return M.precision = k, l
      }
    }l = d, i += 2
  }
} function fo(e) { return String(e.s * e.s / 0) } function dr(e, t) {
  let r, n, i; for ((r = t.indexOf('.')) > -1 && (t = t.replace('.', '')), (n = t.search(/e/i)) > 0 ? (r < 0 && (r = n), r += +t.slice(n + 1), t = t.substring(0, n)) : r < 0 && (r = t.length), n = 0; t.charCodeAt(n) === 48; n++);for (i = t.length; t.charCodeAt(i - 1) === 48; --i);if (t = t.slice(n, i), t) {
    if (i -= n, e.e = r = r - n - 1, e.d = [], n = (r + 1) % O, r < 0 && (n += O), n < i) { for (n && e.d.push(+t.slice(0, n)), i -= O; n < i;)e.d.push(+t.slice(n, n += O)); t = t.slice(n), n = O - t.length }
    else {
      n -= i
    } for (;n--;)t += '0'; e.d.push(+t), _ && (e.e > e.constructor.maxE ? (e.d = null, e.e = Number.NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [0]))
  }
  else {
    e.e = 0, e.d = [0]
  } return e
} function Tl(e, t) {
  let r, n, i, o, s, a, l, d, g; if (t.includes('_')) {
    if (t = t.replace(/(\d)_(?=\d)/g, '$1'), uo.test(t))
      return dr(e, t)
  }
  else if (t === 'Infinity' || t === 'NaN') {
    return +t || (e.s = Number.NaN), e.e = Number.NaN, e.d = null, e
  } if (El.test(t))
    r = 16, t = t.toLowerCase(); else if (wl.test(t))
    r = 2; else if (bl.test(t))
    r = 8; else throw new Error(Ie + t); for (o = t.search(/p/i), o > 0 ? (l = +t.slice(o + 1), t = t.substring(2, o)) : t = t.slice(2), o = t.indexOf('.'), s = o >= 0, n = e.constructor, s && (t = t.replace('.', ''), a = t.length, o = a - o, i = po(n, new n(r), o, o * 2)), d = fr(t, r, ce), g = d.length - 1, o = g; d[o] === 0; --o)d.pop(); return o < 0 ? new n(e.s * 0) : (e.e = Er(d, g), e.d = d, _ = !1, s && (e = U(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? 2 ** l : Be.pow(2, l))), _ = !0, e)
} function Cl(e, t) {
  let r; const n = t.d.length; if (n < 3)
    return t.isZero() ? t : et(e, 2, t, t); r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, t = t.times(1 / br(5, r)), t = et(e, 2, t, t); for (var i, o = new e(5), s = new e(16), a = new e(20); r--;)i = t.times(t), t = t.times(o.plus(i.times(s.times(i).minus(a)))); return t
} function et(e, t, r, n, i) {
  let o; let s; let a; let l; let d = 1; const g = e.precision; const h = Math.ceil(g / O); for (_ = !1, l = r.times(r), a = new e(n); ;) {
    if (s = U(a.times(l), new e(t++ * t++), g, 1), a = i ? n.plus(s) : n.minus(s), n = U(s.times(l), new e(t++ * t++), g, 1), s = a.plus(n), s.d[h] !== void 0) {
      for (o = h; s.d[o] === a.d[o] && o--;);if (o == -1)
        break
    }o = a, a = n, n = s, s = o, d++
  } return _ = !0, s.d.length = h + 1, s
} function br(e, t) { for (var r = e; --t;)r *= e; return r } function go(e, t) {
  let r; const n = t.s < 0; const i = de(e, e.precision, 1); const o = i.times(0.5); if (t = t.abs(), t.lte(o))
    return Pe = n ? 4 : 1, t; if (r = t.divToInt(i), r.isZero()) {
    Pe = n ? 3 : 2
  }
  else {
    if (t = t.minus(r.times(i)), t.lte(o))
      return Pe = ro(r) ? n ? 2 : 3 : n ? 4 : 1, t; Pe = ro(r) ? n ? 1 : 4 : n ? 3 : 2
  } return t.minus(i).abs()
} function bn(e, t, r, n) {
  let i; let o; let s; let a; let l; let d; let g; let h; let v; const S = e.constructor; const A = r !== void 0; if (A ? (re(r, 1, Oe), n === void 0 ? n = S.rounding : re(n, 0, 8)) : (r = S.precision, n = S.rounding), !e.isFinite()) {
    g = fo(e)
  }
  else {
    for (g = ge(e), s = g.indexOf('.'), A ? (i = 2, t == 16 ? r = r * 4 - 3 : t == 8 && (r = r * 3 - 2)) : i = t, s >= 0 && (g = g.replace('.', ''), v = new S(1), v.e = g.length - s, v.d = fr(ge(v), 10, i), v.e = v.d.length), h = fr(g, 10, i), o = l = h.length; h[--l] == 0;)h.pop(); if (!h[0]) {
      g = A ? '0p+0' : '0'
    }
    else {
      if (s < 0 ? o-- : (e = new S(e), e.d = h, e.e = o, e = U(e, v, r, n, 0, i), h = e.d, o = e.e, d = oo), s = h[r], a = i / 2, d = d || h[r + 1] !== void 0, d = n < 4 ? (s !== void 0 || d) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || d || n === 6 && h[r - 1] & 1 || n === (e.s < 0 ? 8 : 7)), h.length = r, d) {
        for (;++h[--r] > i - 1;)h[r] = 0, r || (++o, h.unshift(1))
      } for (l = h.length; !h[l - 1]; --l);for (s = 0, g = ''; s < l; s++)g += hn.charAt(h[s]); if (A) {
        if (l > 1) {
          if (t == 16 || t == 8) { for (s = t == 16 ? 4 : 3, --l; l % s; l++)g += '0'; for (h = fr(g, i, t), l = h.length; !h[l - 1]; --l);for (s = 1, g = '1.'; s < l; s++)g += hn.charAt(h[s]) }
          else {
            g = `${g.charAt(0)}.${g.slice(1)}`
          }
        }g = g + (o < 0 ? 'p' : 'p+') + o
      }
      else if (o < 0) { for (;++o;)g = `0${g}`; g = `0.${g}` }
      else if (++o > l) {
        for (o -= l; o--;)g += '0'
      }
      else {
        o < l && (g = `${g.slice(0, o)}.${g.slice(o)}`)
      }
    }g = (t == 16 ? '0x' : t == 2 ? '0b' : t == 8 ? '0o' : '') + g
  } return e.s < 0 ? `-${g}` : g
} function no(e, t) {
  if (e.length > t)
    return e.length = t, !0
} function Al(e) { return new this(e).abs() } function Rl(e) { return new this(e).acos() } function Sl(e) { return new this(e).acosh() } function kl(e, t) { return new this(e).plus(t) } function Il(e) { return new this(e).asin() } function Ol(e) { return new this(e).asinh() } function Dl(e) { return new this(e).atan() } function Ml(e) { return new this(e).atanh() } function _l(e, t) { e = new this(e), t = new this(t); let r; const n = this.precision; const i = this.rounding; const o = n + 4; return !e.s || !t.s ? r = new this(Number.NaN) : !e.d && !t.d ? (r = de(this, o, 1).times(t.s > 0 ? 0.25 : 0.75), r.s = e.s) : !t.d || e.isZero() ? (r = t.s < 0 ? de(this, n, i) : new this(0), r.s = e.s) : !e.d || t.isZero() ? (r = de(this, o, 1).times(0.5), r.s = e.s) : t.s < 0 ? (this.precision = o, this.rounding = 1, r = this.atan(U(e, t, o, 1)), t = de(this, o, 1), this.precision = n, this.rounding = i, r = e.s < 0 ? r.minus(t) : r.plus(t)) : r = this.atan(U(e, t, o, 1)), r } function Nl(e) { return new this(e).cbrt() } function Fl(e) { return I(e = new this(e), e.e + 1, 2) } function Ll(e, t, r) { return new this(e).clamp(t, r) } function Bl(e) {
  if (!e || typeof e != 'object')
    throw new Error(`${wr}Object expected`); let t; let r; let n; const i = e.defaults === !0; const o = ['precision', 1, Oe, 'rounding', 0, 8, 'toExpNeg', -Xe, 0, 'toExpPos', 0, Xe, 'maxE', 0, Xe, 'minE', -Xe, 0, 'modulo', 0, 9]; for (t = 0; t < o.length; t += 3) {
    if (r = o[t], i && (this[r] = yn[r]), (n = e[r]) !== void 0) {
      if (Z(n) === n && n >= o[t + 1] && n <= o[t + 2])
        this[r] = n; else throw new Error(`${Ie + r}: ${n}`)
    }
  } if (r = 'crypto', i && (this[r] = yn[r]), (n = e[r]) !== void 0) {
    if (n === !0 || n === !1 || n === 0 || n === 1) {
      if (n) {
        if (typeof crypto < 'u' && crypto && (crypto.getRandomValues || crypto.randomBytes))
          this[r] = !0; else throw new Error(ao)
      }
      else {
        this[r] = !1
      }
    }
    else {
      throw new Error(`${Ie + r}: ${n}`)
    }
  } return this
} function ql(e) { return new this(e).cos() } function Ul(e) { return new this(e).cosh() } function ho(e) {
  let t, r, n; function i(o) {
    let s; let a; let l; const d = this; if (!(d instanceof i))
      return new i(o); if (d.constructor = i, io(o)) { d.s = o.s, _ ? !o.d || o.e > i.maxE ? (d.e = Number.NaN, d.d = null) : o.e < i.minE ? (d.e = 0, d.d = [0]) : (d.e = o.e, d.d = o.d.slice()) : (d.e = o.e, d.d = o.d ? o.d.slice() : o.d); return } if (l = typeof o, l === 'number') { if (o === 0) { d.s = 1 / o < 0 ? -1 : 1, d.e = 0, d.d = [0]; return } if (o < 0 ? (o = -o, d.s = -1) : d.s = 1, o === ~~o && o < 1e7) { for (s = 0, a = o; a >= 10; a /= 10)s++; _ ? s > i.maxE ? (d.e = Number.NaN, d.d = null) : s < i.minE ? (d.e = 0, d.d = [0]) : (d.e = s, d.d = [o]) : (d.e = s, d.d = [o]); return } if (o * 0 !== 0) { o || (d.s = Number.NaN), d.e = Number.NaN, d.d = null; return } return dr(d, o.toString()) } if (l === 'string')
      return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), d.s = -1) : (a === 43 && (o = o.slice(1)), d.s = 1), uo.test(o) ? dr(d, o) : Tl(d, o); if (l === 'bigint')
      return o < 0 ? (o = -o, d.s = -1) : d.s = 1, dr(d, o.toString()); throw new Error(Ie + o)
  } if (i.prototype = C, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = Bl, i.clone = ho, i.isDecimal = io, i.abs = Al, i.acos = Rl, i.acosh = Sl, i.add = kl, i.asin = Il, i.asinh = Ol, i.atan = Dl, i.atanh = Ml, i.atan2 = _l, i.cbrt = Nl, i.ceil = Fl, i.clamp = Ll, i.cos = ql, i.cosh = Ul, i.div = $l, i.exp = jl, i.floor = Vl, i.hypot = Gl, i.ln = Ql, i.log = Jl, i.log10 = Hl, i.log2 = Wl, i.max = Kl, i.min = zl, i.mod = Yl, i.mul = Zl, i.pow = Xl, i.random = eu, i.round = tu, i.sign = ru, i.sin = nu, i.sinh = iu, i.sqrt = ou, i.sub = su, i.sum = au, i.tan = lu, i.tanh = uu, i.trunc = cu, e === void 0 && (e = {}), e && e.defaults !== !0) {
    for (n = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'], t = 0; t < n.length;)e.hasOwnProperty(r = n[t++]) || (e[r] = this[r])
  } return i.config(e), i
} function $l(e, t) { return new this(e).div(t) } function jl(e) { return new this(e).exp() } function Vl(e) { return I(e = new this(e), e.e + 1, 3) } function Gl() {
  let e; let t; let r = new this(0); for (_ = !1, e = 0; e < arguments.length;) {
    if (t = new this(arguments[e++]), t.d) {
      r.d && (r = r.plus(t.times(t)))
    }
    else {
      if (t.s)
        return _ = !0, new this(1 / 0); r = t
    }
  } return _ = !0, r.sqrt()
} function io(e) { return e instanceof Be || e && e.toStringTag === lo || !1 } function Ql(e) { return new this(e).ln() } function Jl(e, t) { return new this(e).log(t) } function Wl(e) { return new this(e).log(2) } function Hl(e) { return new this(e).log(10) } function Kl() { return mo(this, arguments, -1) } function zl() { return mo(this, arguments, 1) } function Yl(e, t) { return new this(e).mod(t) } function Zl(e, t) { return new this(e).mul(t) } function Xl(e, t) { return new this(e).pow(t) } function eu(e) {
  let t; let r; let n; let i; let o = 0; const s = new this(1); let a = []; if (e === void 0 ? e = this.precision : re(e, 1, Oe), n = Math.ceil(e / O), this.crypto) {
    if (crypto.getRandomValues) {
      for (t = crypto.getRandomValues(new Uint32Array(n)); o < n;)i = t[o], i >= 429e7 ? t[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7
    }
    else if (crypto.randomBytes) { for (t = crypto.randomBytes(n *= 4); o < n;)i = t[o] + (t[o + 1] << 8) + (t[o + 2] << 16) + ((t[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(t, o) : (a.push(i % 1e7), o += 4); o = n / 4 }
    else {
      throw new Error(ao)
    }
  }
  else {
    for (;o < n;)a[o++] = Math.random() * 1e7 | 0
  } for (n = a[--o], e %= O, n && e && (i = 10 ** (O - e), a[o] = (n / i | 0) * i); a[o] === 0; o--)a.pop(); if (o < 0) {
    r = 0, a = [0]
  }
  else { for (r = -1; a[0] === 0; r -= O)a.shift(); for (n = 1, i = a[0]; i >= 10; i /= 10)n++; n < O && (r -= O - n) } return s.e = r, s.d = a, s
} function tu(e) { return I(e = new this(e), e.e + 1, this.rounding) } function ru(e) { return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || Number.NaN } function nu(e) { return new this(e).sin() } function iu(e) { return new this(e).sinh() } function ou(e) { return new this(e).sqrt() } function su(e, t) { return new this(e).sub(t) } function au() { let e = 0; const t = arguments; let r = new this(t[e]); for (_ = !1; r.s && ++e < t.length;)r = r.plus(t[e]); return _ = !0, I(r, this.precision, this.rounding) } function lu(e) { return new this(e).tan() } function uu(e) { return new this(e).tanh() } function cu(e) { return I(e = new this(e), e.e + 1, 1) }C[Symbol.for('nodejs.util.inspect.custom')] = C.toString; C[Symbol.toStringTag] = 'Decimal'; var Be = C.constructor = ho(yn); gr = new Be(gr); hr = new Be(hr); const ve = Be; function Ct(e) { return e === null ? e : Array.isArray(e) ? e.map(Ct) : typeof e == 'object' ? pu(e) ? mu(e) : Ze(e, Ct) : e } function pu(e) { return e !== null && typeof e == 'object' && typeof e.$type == 'string' } function mu({ $type: e, value: t }) { switch (e) { case 'BigInt':return BigInt(t); case 'Bytes':{ const { buffer: r, byteOffset: n, byteLength: i } = w.Buffer.from(t, 'base64'); return new Uint8Array(r, n, i) } case 'DateTime':return new Date(t); case 'Decimal':return new ve(t); case 'Json':return JSON.parse(t); default:xe(t, 'Unknown tagged value') } }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const he = class {
  _map = new Map(); get(t) { return this._map.get(t)?.value }set(t, r) { this._map.set(t, { value: r }) }getOrCreate(t, r) {
    const n = this._map.get(t); if (n)
      return n.value; const i = r(); return this.set(t, i), i
  }
}; f(); u(); c(); p(); m(); function De(e) { return e.substring(0, 1).toLowerCase() + e.substring(1) }f(); u(); c(); p(); m(); function yo(e, t) { const r = {}; for (const n of e) { const i = n[t]; r[i] = n } return r }f(); u(); c(); p(); m(); function At(e) { let t; return { get() { return t || (t = { value: e() }), t.value } } }f(); u(); c(); p(); m(); function fu(e) { return { models: xn(e.models), enums: xn(e.enums), types: xn(e.types) } } function xn(e) { const t = {}; for (const { name: r, ...n } of e)t[r] = n; return t }f(); u(); c(); p(); m(); function tt(e) { return e instanceof Date || Object.prototype.toString.call(e) === '[object Date]' } function xr(e) { return e.toString() !== 'Invalid Date' }f(); u(); c(); p(); m(); function rt(e) { return Be.isDecimal(e) ? !0 : e !== null && typeof e == 'object' && typeof e.s == 'number' && typeof e.e == 'number' && typeof e.toFixed == 'function' && Array.isArray(e.d) }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Pr = {}; ir(Pr, { ModelAction: () => Rt, datamodelEnumToSchemaEnum: () => du }); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function du(e) { return { name: e.name, values: e.values.map(t => t.name) } }f(); u(); c(); p(); m(); var Rt = (k => (k.findUnique = 'findUnique', k.findUniqueOrThrow = 'findUniqueOrThrow', k.findFirst = 'findFirst', k.findFirstOrThrow = 'findFirstOrThrow', k.findMany = 'findMany', k.create = 'create', k.createMany = 'createMany', k.createManyAndReturn = 'createManyAndReturn', k.update = 'update', k.updateMany = 'updateMany', k.updateManyAndReturn = 'updateManyAndReturn', k.upsert = 'upsert', k.delete = 'delete', k.deleteMany = 'deleteMany', k.groupBy = 'groupBy', k.count = 'count', k.aggregate = 'aggregate', k.findRaw = 'findRaw', k.aggregateRaw = 'aggregateRaw', k))(Rt || {}); const gu = Qe(Hi()); const hu = { red: ze, gray: _i, dim: lr, bold: ar, underline: ki, highlightSource: e => e.highlight() }; const yu = { red: e => e, gray: e => e, dim: e => e, bold: e => e, underline: e => e, highlightSource: e => e }; function wu({ message: e, originalMethod: t, isPanic: r, callArguments: n }) { return { functionName: `prisma.${t}()`, message: e, isPanic: r ?? !1, callArguments: n } } function Eu({ functionName: e, location: t, message: r, isPanic: n, contextLines: i, callArguments: o }, s) {
  const a = ['']; const l = t ? ' in' : ':'; if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold('on us')}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\`${e}\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\`${e}\``)} invocation${l}`)), t && a.push(s.underline(bu(t))), i) { a.push(''); const d = [i.toString()]; o && (d.push(o), d.push(s.dim(')'))), a.push(d.join('')), o && a.push('') }
  else {
    a.push(''), o && a.push(o), a.push('')
  } return a.push(r), a.join(`
`)
} function bu(e) { const t = [e.fileName]; return e.lineNumber && t.push(String(e.lineNumber)), e.columnNumber && t.push(String(e.columnNumber)), t.join(':') } function vr(e) { const t = e.showColors ? hu : yu; let r; return typeof $getTemplateParameters < 'u' ? r = $getTemplateParameters(e, t) : r = wu(e), Eu(r, t) }f(); u(); c(); p(); m(); const Ao = Qe(Pn()); f(); u(); c(); p(); m(); function xo(e, t, r) { const n = Po(e); const i = xu(n); const o = vu(i); o ? Tr(o, t, r) : t.addErrorMessage(() => 'Unknown error') } function Po(e) { return e.errors.flatMap(t => t.kind === 'Union' ? Po(t) : [t]) } function xu(e) { const t = new Map(); const r = []; for (const n of e) { if (n.kind !== 'InvalidArgumentType') { r.push(n); continue } const i = `${n.selectionPath.join('.')}:${n.argumentPath.join('.')}`; const o = t.get(i); o ? t.set(i, { ...n, argument: { ...n.argument, typeNames: Pu(o.argument.typeNames, n.argument.typeNames) } }) : t.set(i, n) } return r.push(...t.values()), r } function Pu(e, t) { return [...new Set(e.concat(t))] } function vu(e) { return gn(e, (t, r) => { const n = Eo(t); const i = Eo(r); return n !== i ? n - i : bo(t) - bo(r) }) } function Eo(e) { let t = 0; return Array.isArray(e.selectionPath) && (t += e.selectionPath.length), Array.isArray(e.argumentPath) && (t += e.argumentPath.length), t } function bo(e) { switch (e.kind) { case 'InvalidArgumentValue':case 'ValueTooLarge':return 20; case 'InvalidArgumentType':return 10; case 'RequiredArgumentMissing':return -10; default:return 0 } }f(); u(); c(); p(); m(); const ae = class {constructor(t, r) { this.name = t; this.value = r }isRequired = !1; makeRequired() { return this.isRequired = !0, this }write(t) { const { colors: { green: r } } = t.context; t.addMarginSymbol(r(this.isRequired ? '+' : '?')), t.write(r(this.name)), this.isRequired || t.write(r('?')), t.write(r(': ')), typeof this.value == 'string' ? t.write(r(this.value)) : t.write(this.value) }}; f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); To(); f(); u(); c(); p(); m(); const nt = class {
  constructor(t = 0, r) { this.context = r; this.currentIndent = t }lines = []; currentLine = ''; currentIndent = 0; marginSymbol; afterNextNewLineCallback; write(t) { return typeof t == 'string' ? this.currentLine += t : t.write(this), this }writeJoined(t, r, n = (i, o) => o.write(i)) { const i = r.length - 1; for (let o = 0; o < r.length; o++)n(r[o], this), o !== i && this.write(t); return this }writeLine(t) { return this.write(t).newLine() }newLine() { this.lines.push(this.indentedCurrentLine()), this.currentLine = '', this.marginSymbol = void 0; const t = this.afterNextNewLineCallback; return this.afterNextNewLineCallback = void 0, t?.(), this }withIndent(t) { return this.indent(), t(this), this.unindent(), this }afterNextNewline(t) { return this.afterNextNewLineCallback = t, this }indent() { return this.currentIndent++, this }unindent() { return this.currentIndent > 0 && this.currentIndent--, this }addMarginSymbol(t) { return this.marginSymbol = t, this }toString() {
    return this.lines.concat(this.indentedCurrentLine()).join(`
`)
  }

  getCurrentLineLength() { return this.currentLine.length }indentedCurrentLine() { const t = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent); return this.marginSymbol ? this.marginSymbol + t.slice(1) : t }
}; vo(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Cr = class {constructor(t) { this.value = t }write(t) { t.write(this.value) }markAsError() { this.value.markAsError() }}; f(); u(); c(); p(); m(); const Ar = e => e; const Rr = { bold: Ar, red: Ar, green: Ar, dim: Ar, enabled: !1 }; const Co = { bold: ar, red: ze, green: Ii, dim: lr, enabled: !0 }; const it = { write(e) { e.writeLine(',') } }; f(); u(); c(); p(); m(); const ye = class {constructor(t) { this.contents = t }isUnderlined = !1; color = t => t; underline() { return this.isUnderlined = !0, this }setColor(t) { return this.color = t, this }write(t) { const r = t.getCurrentLineLength(); t.write(this.color(this.contents)), this.isUnderlined && t.afterNextNewline(() => { t.write(' '.repeat(r)).writeLine(this.color('~'.repeat(this.contents.length))) }) }}; f(); u(); c(); p(); m(); const Me = class {hasError = !1; markAsError() { return this.hasError = !0, this }}; const ot = class extends Me {items = []; addItem(t) { return this.items.push(new Cr(t)), this }getField(t) { return this.items[t] }getPrintWidth() { return this.items.length === 0 ? 2 : Math.max(...this.items.map(r => r.value.getPrintWidth())) + 2 }write(t) { if (this.items.length === 0) { this.writeEmpty(t); return } this.writeWithItems(t) }writeEmpty(t) { const r = new ye('[]'); this.hasError && r.setColor(t.context.colors.red).underline(), t.write(r) }writeWithItems(t) { const { colors: r } = t.context; t.writeLine('[').withIndent(() => t.writeJoined(it, this.items).newLine()).write(']'), this.hasError && t.afterNextNewline(() => { t.writeLine(r.red('~'.repeat(this.getPrintWidth()))) }) }asObject() {}}; const st = class e extends Me {
  fields = {}; suggestions = []; addField(t) { this.fields[t.name] = t }addSuggestion(t) { this.suggestions.push(t) }getField(t) { return this.fields[t] }getDeepField(t) {
    const [r, ...n] = t; const i = this.getField(r); if (!i)
      return; let o = i; for (const s of n) {
      let a; if (o.value instanceof e ? a = o.value.getField(s) : o.value instanceof ot && (a = o.value.getField(Number(s))), !a)
        return; o = a
    } return o
  }

  getDeepFieldValue(t) { return t.length === 0 ? this : this.getDeepField(t)?.value }hasField(t) { return !!this.getField(t) }removeAllFields() { this.fields = {} }removeField(t) { delete this.fields[t] }getFields() { return this.fields }isEmpty() { return Object.keys(this.fields).length === 0 }getFieldValue(t) { return this.getField(t)?.value }getDeepSubSelectionValue(t) {
    let r = this; for (const n of t) {
      if (!(r instanceof e))
        return; const i = r.getSubSelectionValue(n); if (!i)
        return; r = i
    } return r
  }

  getDeepSelectionParent(t) {
    const r = this.getSelectionParent(); if (!r)
      return; let n = r; for (const i of t) {
      const o = n.value.getFieldValue(i); if (!o || !(o instanceof e))
        return; const s = o.getSelectionParent(); if (!s)
        return; n = s
    } return n
  }

  getSelectionParent() {
    const t = this.getField('select')?.value.asObject(); if (t)
      return { kind: 'select', value: t }; const r = this.getField('include')?.value.asObject(); if (r)
      return { kind: 'include', value: r }
  }

  getSubSelectionValue(t) { return this.getSelectionParent()?.value.fields[t].value }getPrintWidth() { const t = Object.values(this.fields); return t.length == 0 ? 2 : Math.max(...t.map(n => n.getPrintWidth())) + 2 }write(t) { const r = Object.values(this.fields); if (r.length === 0 && this.suggestions.length === 0) { this.writeEmpty(t); return } this.writeWithContents(t, r) }asObject() { return this }writeEmpty(t) { const r = new ye('{}'); this.hasError && r.setColor(t.context.colors.red).underline(), t.write(r) }writeWithContents(t, r) { t.writeLine('{').withIndent(() => { t.writeJoined(it, [...r, ...this.suggestions]).newLine() }), t.write('}'), this.hasError && t.afterNextNewline(() => { t.writeLine(t.context.colors.red('~'.repeat(this.getPrintWidth()))) }) }
}; f(); u(); c(); p(); m(); const H = class extends Me {constructor(r) { super(); this.text = r }getPrintWidth() { return this.text.length }write(r) { const n = new ye(this.text); this.hasError && n.underline().setColor(r.context.colors.red), r.write(n) }asObject() {}}; f(); u(); c(); p(); m(); const St = class {fields = []; addField(t, r) { return this.fields.push({ write(n) { const { green: i, dim: o } = n.context.colors; n.write(i(o(`${t}: ${r}`))).addMarginSymbol(i(o('+'))) } }), this }write(t) { const { colors: { green: r } } = t.context; t.writeLine(r('{')).withIndent(() => { t.writeJoined(it, this.fields).newLine() }).write(r('}')).addMarginSymbol(r('+')) }}; function Tr(e, t, r) { switch (e.kind) { case 'MutuallyExclusiveFields':Tu(e, t); break; case 'IncludeOnScalar':Cu(e, t); break; case 'EmptySelection':Au(e, t, r); break; case 'UnknownSelectionField':Iu(e, t); break; case 'InvalidSelectionValue':Ou(e, t); break; case 'UnknownArgument':Du(e, t); break; case 'UnknownInputField':Mu(e, t); break; case 'RequiredArgumentMissing':_u(e, t); break; case 'InvalidArgumentType':Nu(e, t); break; case 'InvalidArgumentValue':Fu(e, t); break; case 'ValueTooLarge':Lu(e, t); break; case 'SomeFieldsMissing':Bu(e, t); break; case 'TooManyFieldsGiven':qu(e, t); break; case 'Union':xo(e, t, r); break; default:throw new Error(`not implemented: ${e.kind}`) } } function Tu(e, t) { const r = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); r && (r.getField(e.firstField)?.markAsError(), r.getField(e.secondField)?.markAsError()), t.addErrorMessage(n => `Please ${n.bold('either')} use ${n.green(`\`${e.firstField}\``)} or ${n.green(`\`${e.secondField}\``)}, but ${n.red('not both')} at the same time.`) } function Cu(e, t) {
  const [r, n] = kt(e.selectionPath); const i = e.outputType; const o = t.arguments.getDeepSelectionParent(r)?.value; if (o && (o.getField(n)?.markAsError(), i)) {
    for (const s of i.fields)s.isRelation && o.addSuggestion(new ae(s.name, 'true'))
  } t.addErrorMessage((s) => {
    let a = `Invalid scalar field ${s.red(`\`${n}\``)} for ${s.bold('include')} statement`; return i ? a += ` on model ${s.bold(i.name)}. ${It(s)}` : a += '.', a += `
Note that ${s.bold('include')} statements only accept relation fields.`, a
  })
} function Au(e, t, r) { const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); if (n) { const i = n.getField('omit')?.value.asObject(); if (i) { Ru(e, t, i); return } if (n.hasField('select')) { Su(e, t); return } } if (r?.[De(e.outputType.name)]) { ku(e, t); return }t.addErrorMessage(() => `Unknown field at "${e.selectionPath.join('.')} selection"`) } function Ru(e, t, r) { r.removeAllFields(); for (const n of e.outputType.fields)r.addSuggestion(new ae(n.name, 'false')); t.addErrorMessage(n => `The ${n.red('omit')} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`) } function Su(e, t) { const r = e.outputType; const n = t.arguments.getDeepSelectionParent(e.selectionPath)?.value; const i = n?.isEmpty() ?? !1; n && (n.removeAllFields(), ko(n, r)), t.addErrorMessage(o => i ? `The ${o.red('`select`')} statement for type ${o.bold(r.name)} must not be empty. ${It(o)}` : `The ${o.red('`select`')} statement for type ${o.bold(r.name)} needs ${o.bold('at least one truthy value')}.`) } function ku(e, t) {
  const r = new St(); for (const i of e.outputType.fields)i.isRelation || r.addField(i.name, 'false'); const n = new ae('omit', r).makeRequired(); if (e.selectionPath.length === 0) {
    t.arguments.addSuggestion(n)
  }
  else { const [i, o] = kt(e.selectionPath); const a = t.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o); if (a) { const l = a?.value.asObject() ?? new st(); l.addSuggestion(n), a.value = l } }t.addErrorMessage(i => `The global ${i.red('omit')} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`)
} function Iu(e, t) { const r = Io(e.selectionPath, t); if (r.parentKind !== 'unknown') { r.field.markAsError(); const n = r.parent; switch (r.parentKind) { case 'select':ko(n, e.outputType); break; case 'include':Uu(n, e.outputType); break; case 'omit':$u(n, e.outputType); break } }t.addErrorMessage((n) => { const i = [`Unknown field ${n.red(`\`${r.fieldName}\``)}`]; return r.parentKind !== 'unknown' && i.push(`for ${n.bold(r.parentKind)} statement`), i.push(`on model ${n.bold(`\`${e.outputType.name}\``)}.`), i.push(It(n)), i.join(' ') }) } function Ou(e, t) { const r = Io(e.selectionPath, t); r.parentKind !== 'unknown' && r.field.value.markAsError(), t.addErrorMessage(n => `Invalid value for selection field \`${n.red(r.fieldName)}\`: ${e.underlyingError}`) } function Du(e, t) { const r = e.argumentPath[0]; const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); n && (n.getField(r)?.markAsError(), ju(n, e.arguments)), t.addErrorMessage(i => Ro(i, r, e.arguments.map(o => o.name))) } function Mu(e, t) { const [r, n] = kt(e.argumentPath); const i = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); if (i) { i.getDeepField(e.argumentPath)?.markAsError(); const o = i.getDeepFieldValue(r)?.asObject(); o && Oo(o, e.inputType) }t.addErrorMessage(o => Ro(o, n, e.inputType.fields.map(s => s.name))) } function Ro(e, t, r) { const n = [`Unknown argument \`${e.red(t)}\`.`]; const i = Gu(t, r); return i && n.push(`Did you mean \`${e.green(i)}\`?`), r.length > 0 && n.push(It(e)), n.join(' ') } function _u(e, t) {
  let r; t.addErrorMessage(l => r?.value instanceof H && r.value.text === 'null' ? `Argument \`${l.green(o)}\` must not be ${l.red('null')}.` : `Argument \`${l.green(o)}\` is missing.`); const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); if (!n)
    return; let [i, o] = kt(e.argumentPath); const s = new St(); const a = n.getDeepFieldValue(i)?.asObject(); if (a) {
    if (r = a.getField(o), r && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === 'object') { for (const l of e.inputTypes[0].fields)s.addField(l.name, l.typeNames.join(' | ')); a.addSuggestion(new ae(o, s).makeRequired()) }
    else { const l = e.inputTypes.map(So).join(' | '); a.addSuggestion(new ae(o, l).makeRequired()) }
  }
} function So(e) { return e.kind === 'list' ? `${So(e.elementType)}[]` : e.name } function Nu(e, t) { const r = e.argument.name; const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i) => { const o = Sr('or', e.argument.typeNames.map(s => i.green(s))); return `Argument \`${i.bold(r)}\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.` }) } function Fu(e, t) { const r = e.argument.name; const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i) => { const o = [`Invalid value for argument \`${i.bold(r)}\``]; if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push('.'), e.argument.typeNames.length > 0) { const s = Sr('or', e.argument.typeNames.map(a => i.green(a))); o.push(` Expected ${s}.`) } return o.join('') }) } function Lu(e, t) { const r = e.argument.name; const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); let i; if (n) { const s = n.getDeepField(e.argumentPath)?.value; s?.markAsError(), s instanceof H && (i = s.text) }t.addErrorMessage((o) => { const s = ['Unable to fit value']; return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \`${o.bold(r)}\``), s.join(' ') }) } function Bu(e, t) { const r = e.argumentPath[e.argumentPath.length - 1]; const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); if (n) { const i = n.getDeepFieldValue(e.argumentPath)?.asObject(); i && Oo(i, e.inputType) }t.addErrorMessage((i) => { const o = [`Argument \`${i.bold(r)}\` of type ${i.bold(e.inputType.name)} needs`]; return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green('at least one of')} ${Sr('or', e.constraints.requiredFields.map(s => `\`${i.bold(s)}\``))} arguments.`) : o.push(`${i.green('at least one')} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(It(i)), o.join(' ') }) } function qu(e, t) { const r = e.argumentPath[e.argumentPath.length - 1]; const n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(); let i = []; if (n) { const o = n.getDeepFieldValue(e.argumentPath)?.asObject(); o && (o.markAsError(), i = Object.keys(o.getFields())) }t.addErrorMessage((o) => { const s = [`Argument \`${o.bold(r)}\` of type ${o.bold(e.inputType.name)} needs`]; return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green('exactly one')} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green('at most one')} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${Sr('and', i.map(a => o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push('one.') : s.push(`${e.constraints.maxFieldCount}.`), s.join(' ') }) } function ko(e, t) { for (const r of t.fields)e.hasField(r.name) || e.addSuggestion(new ae(r.name, 'true')) } function Uu(e, t) { for (const r of t.fields)r.isRelation && !e.hasField(r.name) && e.addSuggestion(new ae(r.name, 'true')) } function $u(e, t) { for (const r of t.fields)!e.hasField(r.name) && !r.isRelation && e.addSuggestion(new ae(r.name, 'true')) } function ju(e, t) { for (const r of t)e.hasField(r.name) || e.addSuggestion(new ae(r.name, r.typeNames.join(' | '))) } function Io(e, t) {
  const [r, n] = kt(e); const i = t.arguments.getDeepSubSelectionValue(r)?.asObject(); if (!i)
    return { parentKind: 'unknown', fieldName: n }; const o = i.getFieldValue('select')?.asObject(); const s = i.getFieldValue('include')?.asObject(); const a = i.getFieldValue('omit')?.asObject(); let l = o?.getField(n); return o && l ? { parentKind: 'select', parent: o, field: l, fieldName: n } : (l = s?.getField(n), s && l ? { parentKind: 'include', field: l, parent: s, fieldName: n } : (l = a?.getField(n), a && l ? { parentKind: 'omit', field: l, parent: a, fieldName: n } : { parentKind: 'unknown', fieldName: n }))
} function Oo(e, t) {
  if (t.kind === 'object') {
    for (const r of t.fields)e.hasField(r.name) || e.addSuggestion(new ae(r.name, r.typeNames.join(' | ')))
  }
} function kt(e) {
  const t = [...e]; const r = t.pop(); if (!r)
    throw new Error('unexpected empty path'); return [t, r]
} function It({ green: e, enabled: t }) { return `Available options are ${t ? `listed in ${e('green')}` : 'marked with ?'}.` } function Sr(e, t) {
  if (t.length === 1)
    return t[0]; const r = [...t]; const n = r.pop(); return `${r.join(', ')} ${e} ${n}`
} const Vu = 3; function Gu(e, t) { let r = 1 / 0; let n; for (const i of t) { const o = (0, Ao.default)(e, i); o > Vu || o < r && (r = o, n = i) } return n }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Ot = class {modelName; name; typeName; isList; isEnum; constructor(t, r, n, i, o) { this.modelName = t, this.name = r, this.typeName = n, this.isList = i, this.isEnum = o }_toGraphQLInputType() { const t = this.isList ? 'List' : ''; const r = this.isEnum ? 'Enum' : ''; return `${t}${r}${this.typeName}FieldRefInput<${this.modelName}>` }}; function at(e) { return e instanceof Ot }f(); u(); c(); p(); m(); const kr = Symbol(); const Tn = new WeakMap(); const Te = class {constructor(t) { t === kr ? Tn.set(this, `Prisma.${this._getName()}`) : Tn.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`) }_getName() { return this.constructor.name }toString() { return Tn.get(this) }}; const Dt = class extends Te {_getNamespace() { return 'NullTypes' }}; const Mt = class extends Dt {#e}; An(Mt, 'DbNull'); const _t = class extends Dt {#e}; An(_t, 'JsonNull'); const Nt = class extends Dt {#e}; An(Nt, 'AnyNull'); const Cn = { classes: { DbNull: Mt, JsonNull: _t, AnyNull: Nt }, instances: { DbNull: new Mt(kr), JsonNull: new _t(kr), AnyNull: new Nt(kr) } }; function An(e, t) { Object.defineProperty(e, 'name', { value: t, configurable: !0 }) }f(); u(); c(); p(); m(); const Do = ': '; const Ir = class {constructor(t, r) { this.name = t; this.value = r }hasError = !1; markAsError() { this.hasError = !0 }getPrintWidth() { return this.name.length + this.value.getPrintWidth() + Do.length }write(t) { const r = new ye(this.name); this.hasError && r.underline().setColor(t.context.colors.red), t.write(r).write(Do).write(this.value) }}; const Rn = class {
  arguments; errorMessages = []; constructor(t) { this.arguments = t }write(t) { t.write(this.arguments) }addErrorMessage(t) { this.errorMessages.push(t) }renderAllMessages(t) {
    return this.errorMessages.map(r => r(t)).join(`
`)
  }
}; function lt(e) { return new Rn(Mo(e)) } function Mo(e) { const t = new st(); for (const [r, n] of Object.entries(e)) { const i = new Ir(r, _o(n)); t.addField(i) } return t } function _o(e) {
  if (typeof e == 'string')
    return new H(JSON.stringify(e)); if (typeof e == 'number' || typeof e == 'boolean')
    return new H(String(e)); if (typeof e == 'bigint')
    return new H(`${e}n`); if (e === null)
    return new H('null'); if (e === void 0)
    return new H('undefined'); if (rt(e))
    return new H(`new Prisma.Decimal("${e.toFixed()}")`); if (e instanceof Uint8Array)
    return w.Buffer.isBuffer(e) ? new H(`Buffer.alloc(${e.byteLength})`) : new H(`new Uint8Array(${e.byteLength})`); if (e instanceof Date) { const t = xr(e) ? e.toISOString() : 'Invalid Date'; return new H(`new Date("${t}")`) } return e instanceof Te ? new H(`Prisma.${e._getName()}`) : at(e) ? new H(`prisma.${De(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? Qu(e) : typeof e == 'object' ? Mo(e) : new H(Object.prototype.toString.call(e))
} function Qu(e) { const t = new ot(); for (const r of e)t.addItem(_o(r)); return t } function Or(e, t) { const r = t === 'pretty' ? Co : Rr; const n = e.renderAllMessages(r); const i = new nt(0, { colors: r }).write(e).toString(); return { message: n, args: i } } function Dr({ args: e, errors: t, errorFormat: r, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) { const a = lt(e); for (const h of t)Tr(h, a, s); const { message: l, args: d } = Or(a, r); const g = vr({ message: l, callsite: n, originalMethod: i, showColors: r === 'pretty', callArguments: d }); throw new X(g, { clientVersion: o }) }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function we(e) { return e.replace(/^./, t => t.toLowerCase()) }f(); u(); c(); p(); m(); function Fo(e, t, r) { const n = we(r); return !t.result || !(t.result.$allModels || t.result[n]) ? e : Ju({ ...e, ...No(t.name, e, t.result.$allModels), ...No(t.name, e, t.result[n]) }) } function Ju(e) { const t = new he(); const r = (n, i) => t.getOrCreate(n, () => i.has(n) ? [n] : (i.add(n), e[n] ? e[n].needs.flatMap(o => r(o, i)) : [n])); return Ze(e, n => ({ ...n, needs: r(n.name, new Set()) })) } function No(e, t, r) { return r ? Ze(r, ({ needs: n, compute: i }, o) => ({ name: o, needs: n ? Object.keys(n).filter(s => n[s]) : [], compute: Wu(t, o, i) })) : {} } function Wu(e, t, r) { const n = e?.[t]?.compute; return n ? i => r({ ...i, [t]: n(i) }) : r } function Lo(e, t) {
  if (!t)
    return e; const r = { ...e }; for (const n of Object.values(t)) {
    if (e[n.name]) {
      for (const i of n.needs)r[i] = !0
    }
  } return r
} function Bo(e, t) {
  if (!t)
    return e; const r = { ...e }; for (const n of Object.values(t)) {
    if (!e[n.name]) {
      for (const i of n.needs) delete r[i]
    }
  } return r
} const Mr = class {constructor(t, r) { this.extension = t; this.previous = r }computedFieldsCache = new he(); modelExtensionsCache = new he(); queryCallbacksCache = new he(); clientExtensions = At(() => this.extension.client ? { ...this.previous?.getAllClientExtensions(), ...this.extension.client } : this.previous?.getAllClientExtensions()); batchCallbacks = At(() => { const t = this.previous?.getAllBatchQueryCallbacks() ?? []; const r = this.extension.query?.$__internalBatch; return r ? t.concat(r) : t }); getAllComputedFields(t) { return this.computedFieldsCache.getOrCreate(t, () => Fo(this.previous?.getAllComputedFields(t), this.extension, t)) }getAllClientExtensions() { return this.clientExtensions.get() }getAllModelExtensions(t) { return this.modelExtensionsCache.getOrCreate(t, () => { const r = we(t); return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t) : { ...this.previous?.getAllModelExtensions(t), ...this.extension.model.$allModels, ...this.extension.model[r] } }) }getAllQueryCallbacks(t, r) { return this.queryCallbacksCache.getOrCreate(`${t}:${r}`, () => { const n = this.previous?.getAllQueryCallbacks(t, r) ?? []; const i = []; const o = this.extension.query; return !o || !(o[t] || o.$allModels || o[r] || o.$allOperations) ? n : (o[t] !== void 0 && (o[t][r] !== void 0 && i.push(o[t][r]), o[t].$allOperations !== void 0 && i.push(o[t].$allOperations)), t !== '$none' && o.$allModels !== void 0 && (o.$allModels[r] !== void 0 && i.push(o.$allModels[r]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[r] !== void 0 && i.push(o[r]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i)) }) }getAllBatchQueryCallbacks() { return this.batchCallbacks.get() }}; const ut = class e {constructor(t) { this.head = t } static empty() { return new e() } static single(t) { return new e(new Mr(t)) }isEmpty() { return this.head === void 0 }append(t) { return new e(new Mr(t, this.head)) }getAllComputedFields(t) { return this.head?.getAllComputedFields(t) }getAllClientExtensions() { return this.head?.getAllClientExtensions() }getAllModelExtensions(t) { return this.head?.getAllModelExtensions(t) }getAllQueryCallbacks(t, r) { return this.head?.getAllQueryCallbacks(t, r) ?? [] }getAllBatchQueryCallbacks() { return this.head?.getAllBatchQueryCallbacks() ?? [] }}; f(); u(); c(); p(); m(); const _r = class {constructor(t) { this.name = t }}; function qo(e) { return e instanceof _r } function Hu(e) { return new _r(e) }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Uo = Symbol(); const Ft = class {
  constructor(t) {
    if (t !== Uo)
      throw new Error('Skip instance can not be constructed directly')
  }

  ifUndefined(t) { return t === void 0 ? Sn : t }
}; var Sn = new Ft(Uo); function Ee(e) { return e instanceof Ft } const Ku = { findUnique: 'findUnique', findUniqueOrThrow: 'findUniqueOrThrow', findFirst: 'findFirst', findFirstOrThrow: 'findFirstOrThrow', findMany: 'findMany', count: 'aggregate', create: 'createOne', createMany: 'createMany', createManyAndReturn: 'createManyAndReturn', update: 'updateOne', updateMany: 'updateMany', updateManyAndReturn: 'updateManyAndReturn', upsert: 'upsertOne', delete: 'deleteOne', deleteMany: 'deleteMany', executeRaw: 'executeRaw', queryRaw: 'queryRaw', aggregate: 'aggregate', groupBy: 'groupBy', runCommandRaw: 'runCommandRaw', findRaw: 'findRaw', aggregateRaw: 'aggregateRaw' }; const $o = 'explicitly `undefined` values are not allowed'; function In({ modelName: e, action: t, args: r, runtimeDataModel: n, extensions: i = ut.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: d, globalOmit: g }) { const h = new kn({ runtimeDataModel: n, modelName: e, action: t, rootArgs: r, callsite: o, extensions: i, selectionPath: [], argumentPath: [], originalMethod: s, errorFormat: a, clientVersion: l, previewFeatures: d, globalOmit: g }); return { modelName: e, action: Ku[t], query: Lt(r, h) } } function Lt({ select: e, include: t, ...r } = {}, n) { const i = r.omit; return delete r.omit, { arguments: Vo(r, n), selection: zu(e, t, i, n) } } function zu(e, t, r, n) { return e ? (t ? n.throwValidationError({ kind: 'MutuallyExclusiveFields', firstField: 'include', secondField: 'select', selectionPath: n.getSelectionPath() }) : r && n.throwValidationError({ kind: 'MutuallyExclusiveFields', firstField: 'omit', secondField: 'select', selectionPath: n.getSelectionPath() }), ec(e, n)) : Yu(n, t, r) } function Yu(e, t, r) { const n = {}; return e.modelOrType && !e.isRawAction() && (n.$composites = !0, n.$scalars = !0), t && Zu(n, t, e), Xu(n, r, e), n } function Zu(e, t, r) {
  for (const [n, i] of Object.entries(t)) {
    if (Ee(i))
      continue; const o = r.nestSelection(n); if (On(i, o), i === !1 || i === void 0) { e[n] = !1; continue } const s = r.findField(n); if (s && s.kind !== 'object' && r.throwValidationError({ kind: 'IncludeOnScalar', selectionPath: r.getSelectionPath().concat(n), outputType: r.getOutputTypeDescription() }), s) { e[n] = Lt(i === !0 ? {} : i, o); continue } if (i === !0) { e[n] = !0; continue }e[n] = Lt(i, o)
  }
} function Xu(e, t, r) {
  const n = r.getComputedFields(); const i = { ...r.getGlobalOmit(), ...t }; const o = Bo(i, n); for (const [s, a] of Object.entries(o)) {
    if (Ee(a))
      continue; On(a, r.nestSelection(s)); const l = r.findField(s); n?.[s] && !l || (e[s] = !a)
  }
} function ec(e, t) {
  const r = {}; const n = t.getComputedFields(); const i = Lo(e, n); for (const [o, s] of Object.entries(i)) {
    if (Ee(s))
      continue; const a = t.nestSelection(o); On(s, a); const l = t.findField(o); if (!(n?.[o] && !l)) { if (s === !1 || s === void 0 || Ee(s)) { r[o] = !1; continue } if (s === !0) { l?.kind === 'object' ? r[o] = Lt({}, a) : r[o] = !0; continue }r[o] = Lt(s, a) }
  } return r
} function jo(e, t) {
  if (e === null)
    return null; if (typeof e == 'string' || typeof e == 'number' || typeof e == 'boolean')
    return e; if (typeof e == 'bigint')
    return { $type: 'BigInt', value: String(e) }; if (tt(e)) {
    if (xr(e))
      return { $type: 'DateTime', value: e.toISOString() }; t.throwValidationError({ kind: 'InvalidArgumentValue', selectionPath: t.getSelectionPath(), argumentPath: t.getArgumentPath(), argument: { name: t.getArgumentName(), typeNames: ['Date'] }, underlyingError: 'Provided Date object is invalid' })
  } if (qo(e))
    return { $type: 'Param', value: e.name }; if (at(e))
    return { $type: 'FieldRef', value: { _ref: e.name, _container: e.modelName } }; if (Array.isArray(e))
    return tc(e, t); if (ArrayBuffer.isView(e)) { const { buffer: r, byteOffset: n, byteLength: i } = e; return { $type: 'Bytes', value: w.Buffer.from(r, n, i).toString('base64') } } if (rc(e))
    return e.values; if (rt(e))
    return { $type: 'Decimal', value: e.toFixed() }; if (e instanceof Te) {
    if (e !== Cn.instances[e._getName()])
      throw new Error('Invalid ObjectEnumValue'); return { $type: 'Enum', value: e._getName() }
  } if (nc(e))
    return e.toJSON(); if (typeof e == 'object')
    return Vo(e, t); t.throwValidationError({ kind: 'InvalidArgumentValue', selectionPath: t.getSelectionPath(), argumentPath: t.getArgumentPath(), argument: { name: t.getArgumentName(), typeNames: [] }, underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a ".toJSON()" method on it` })
} function Vo(e, t) {
  if (e.$type)
    return { $type: 'Raw', value: e }; const r = {}; for (const n in e) { const i = e[n]; const o = t.nestArgument(n); Ee(i) || (i !== void 0 ? r[n] = jo(i, o) : t.isPreviewFeatureOn('strictUndefinedChecks') && t.throwValidationError({ kind: 'InvalidArgumentValue', argumentPath: o.getArgumentPath(), selectionPath: t.getSelectionPath(), argument: { name: t.getArgumentName(), typeNames: [] }, underlyingError: $o })) } return r
} function tc(e, t) { const r = []; for (let n = 0; n < e.length; n++) { const i = t.nestArgument(String(n)); const o = e[n]; if (o === void 0 || Ee(o)) { const s = o === void 0 ? 'undefined' : 'Prisma.skip'; t.throwValidationError({ kind: 'InvalidArgumentValue', selectionPath: i.getSelectionPath(), argumentPath: i.getArgumentPath(), argument: { name: `${t.getArgumentName()}[${n}]`, typeNames: [] }, underlyingError: `Can not use \`${s}\` value within array. Use \`null\` or filter out \`${s}\` values` }) }r.push(jo(o, i)) } return r } function rc(e) { return typeof e == 'object' && e !== null && e.__prismaRawParameters__ === !0 } function nc(e) { return typeof e == 'object' && e !== null && typeof e.toJSON == 'function' } function On(e, t) { e === void 0 && t.isPreviewFeatureOn('strictUndefinedChecks') && t.throwValidationError({ kind: 'InvalidSelectionValue', selectionPath: t.getSelectionPath(), underlyingError: $o }) } var kn = class e {
  constructor(t) { this.params = t; this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]) }modelOrType; throwValidationError(t) { Dr({ errors: [t], originalMethod: this.params.originalMethod, args: this.params.rootArgs ?? {}, callsite: this.params.callsite, errorFormat: this.params.errorFormat, clientVersion: this.params.clientVersion, globalOmit: this.params.globalOmit }) }getSelectionPath() { return this.params.selectionPath }getArgumentPath() { return this.params.argumentPath }getArgumentName() { return this.params.argumentPath[this.params.argumentPath.length - 1] }getOutputTypeDescription() {
    if (!(!this.params.modelName || !this.modelOrType))
      return { name: this.params.modelName, fields: this.modelOrType.fields.map(t => ({ name: t.name, typeName: 'boolean', isRelation: t.kind === 'object' })) }
  }

  isRawAction() { return ['executeRaw', 'queryRaw', 'runCommandRaw', 'findRaw', 'aggregateRaw'].includes(this.params.action) }isPreviewFeatureOn(t) { return this.params.previewFeatures.includes(t) }getComputedFields() {
    if (this.params.modelName)
      return this.params.extensions.getAllComputedFields(this.params.modelName)
  }

  findField(t) { return this.modelOrType?.fields.find(r => r.name === t) }nestSelection(t) { const r = this.findField(t); const n = r?.kind === 'object' ? r.type : void 0; return new e({ ...this.params, modelName: n, selectionPath: this.params.selectionPath.concat(t) }) }getGlobalOmit() { return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[De(this.params.modelName)] ?? {} : {} }shouldApplyGlobalOmit() { switch (this.params.action) { case 'findFirst':case 'findFirstOrThrow':case 'findUniqueOrThrow':case 'findMany':case 'upsert':case 'findUnique':case 'createManyAndReturn':case 'create':case 'update':case 'updateManyAndReturn':case 'delete':return !0; case 'executeRaw':case 'aggregateRaw':case 'runCommandRaw':case 'findRaw':case 'createMany':case 'deleteMany':case 'groupBy':case 'updateMany':case 'count':case 'aggregate':case 'queryRaw':return !1; default:xe(this.params.action, 'Unknown action') } }nestArgument(t) { return new e({ ...this.params, argumentPath: this.params.argumentPath.concat(t) }) }
}; f(); u(); c(); p(); m(); function Go(e) {
  if (!e._hasPreviewFlag('metrics'))
    throw new X('`metrics` preview feature must be enabled in order to access metrics API', { clientVersion: e._clientVersion })
} const Bt = class {_client; constructor(t) { this._client = t }prometheus(t) { return Go(this._client), this._client._engine.metrics({ format: 'prometheus', ...t }) }json(t) { return Go(this._client), this._client._engine.metrics({ format: 'json', ...t }) }}; f(); u(); c(); p(); m(); function ic(e, t) { const r = At(() => oc(t)); Object.defineProperty(e, 'dmmf', { get: () => r.get() }) } function oc(e) { return { datamodel: { models: Dn(e.models), enums: Dn(e.enums), types: Dn(e.types) } } } function Dn(e) { return Object.entries(e).map(([t, r]) => ({ name: t, ...r })) }f(); u(); c(); p(); m(); const Mn = new WeakMap(); const Nr = '$$PrismaTypedSql'; const qt = class {constructor(t, r) { Mn.set(this, { sql: t, values: r }), Object.defineProperty(this, Nr, { value: Nr }) } get sql() { return Mn.get(this).sql } get values() { return Mn.get(this).values }}; function sc(e) { return (...t) => new qt(e, t) } function Fr(e) { return e != null && e[Nr] === Nr }f(); u(); c(); p(); m(); const oa = Qe(Qo()); f(); u(); c(); p(); m(); Jo(); Ui(); Gi(); f(); u(); c(); p(); m(); const le = class e {
  constructor(t, r) {
    if (t.length - 1 !== r.length)
      throw t.length === 0 ? new TypeError('Expected at least 1 string') : new TypeError(`Expected ${t.length} strings to have ${t.length - 1} values`); const n = r.reduce((s, a) => s + (a instanceof e ? a.values.length : 1), 0); this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = t[0]; let i = 0; let o = 0; for (;i < r.length;) {
      const s = r[i++]; const a = t[i]; if (s instanceof e) { this.strings[o] += s.strings[0]; let l = 0; for (;l < s.values.length;) this.values[o++] = s.values[l++], this.strings[o] = s.strings[l]; this.strings[o] += a }
      else {
        this.values[o++] = s, this.strings[o] = a
      }
    }
  }

  get sql() { const t = this.strings.length; let r = 1; let n = this.strings[0]; for (;r < t;)n += `?${this.strings[r++]}`; return n } get statement() { const t = this.strings.length; let r = 1; let n = this.strings[0]; for (;r < t;)n += `:${r}${this.strings[r++]}`; return n } get text() { const t = this.strings.length; let r = 1; let n = this.strings[0]; for (;r < t;)n += `$${r}${this.strings[r++]}`; return n }inspect() { return { sql: this.sql, statement: this.statement, text: this.text, values: this.values } }
}; function lc(e, t = ',', r = '', n = '') {
  if (e.length === 0)
    throw new TypeError('Expected `join([])` to be called with an array of multiple elements, but got an empty array'); return new le([r, ...Array.from({ length: e.length - 1 }).fill(t), n], e)
} function Wo(e) { return new le([e], []) } const uc = Wo(''); function Ho(e, ...t) { return new le(e, t) }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function Ut(e) { return { getKeys() { return Object.keys(e) }, getPropertyValue(t) { return e[t] } } }f(); u(); c(); p(); m(); function ee(e, t) { return { getKeys() { return [e] }, getPropertyValue() { return t() } } }f(); u(); c(); p(); m(); function qe(e) { const t = new he(); return { getKeys() { return e.getKeys() }, getPropertyValue(r) { return t.getOrCreate(r, () => e.getPropertyValue(r)) }, getPropertyDescriptor(r) { return e.getPropertyDescriptor?.(r) } } }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Br = { enumerable: !0, configurable: !0, writable: !0 }; function qr(e) { const t = new Set(e); return { getPrototypeOf: () => Object.prototype, getOwnPropertyDescriptor: () => Br, has: (r, n) => t.has(n), set: (r, n, i) => t.add(n) && Reflect.set(r, n, i), ownKeys: () => [...t] } } const Ko = Symbol.for('nodejs.util.inspect.custom'); function pe(e, t) {
  const r = cc(t); const n = new Set(); const i = new Proxy(e, { get(o, s) {
    if (n.has(s))
      return o[s]; const a = r.get(s); return a ? a.getPropertyValue(s) : o[s]
  }, has(o, s) {
    if (n.has(s))
      return !0; const a = r.get(s); return a ? a.has?.(s) ?? !0 : Reflect.has(o, s)
  }, ownKeys(o) { const s = zo(Reflect.ownKeys(o), r); const a = zo(Array.from(r.keys()), r); return [...new Set([...s, ...a, ...n])] }, set(o, s, a) { return r.get(s)?.getPropertyDescriptor?.(s)?.writable === !1 ? !1 : (n.add(s), Reflect.set(o, s, a)) }, getOwnPropertyDescriptor(o, s) {
    const a = Reflect.getOwnPropertyDescriptor(o, s); if (a && !a.configurable)
      return a; const l = r.get(s); return l ? l.getPropertyDescriptor ? { ...Br, ...l?.getPropertyDescriptor(s) } : Br : a
  }, defineProperty(o, s, a) { return n.add(s), Reflect.defineProperty(o, s, a) }, getPrototypeOf: () => Object.prototype }); return i[Ko] = function () { const o = { ...this }; return delete o[Ko], o }, i
} function cc(e) { const t = new Map(); for (const r of e) { const n = r.getKeys(); for (const i of n)t.set(i, r) } return t } function zo(e, t) { return e.filter(r => t.get(r)?.has?.(r) ?? !0) }f(); u(); c(); p(); m(); function ct(e) { return { getKeys() { return e }, has() { return !1 }, getPropertyValue() {} } }f(); u(); c(); p(); m(); function Ur(e, t) { return { batch: e, transaction: t?.kind === 'batch' ? { isolationLevel: t.options.isolationLevel } : void 0 } }f(); u(); c(); p(); m(); function Yo(e) {
  if (e === void 0)
    return ''; const t = lt(e); return new nt(0, { colors: Rr }).write(t).toString()
}f(); u(); c(); p(); m(); const pc = 'P2037'; function $r({ error: e, user_facing_error: t }, r, n) { return t.error_code ? new oe(mc(t, n), { code: t.error_code, clientVersion: r, meta: t.meta, batchRequestIdx: t.batch_request_idx }) : new se(e, { clientVersion: r, batchRequestIdx: t.batch_request_idx }) } function mc(e, t) {
  let r = e.message; return (t === 'postgresql' || t === 'postgres' || t === 'mysql') && e.error_code === pc && (r += `
Prisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r
}f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const _n = class {getLocation() { return null }}; function _e(e) { return typeof $EnabledCallSite == 'function' && e !== 'minimal' ? new $EnabledCallSite() : new _n() }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Zo = { _avg: !0, _count: !0, _sum: !0, _min: !0, _max: !0 }; function pt(e = {}) { const t = dc(e); return Object.entries(t).reduce((n, [i, o]) => (Zo[i] !== void 0 ? n.select[i] = { select: o } : n[i] = o, n), { select: {} }) } function dc(e = {}) { return typeof e._count == 'boolean' ? { ...e, _count: { _all: e._count } } : e } function jr(e = {}) { return t => (typeof e._count == 'boolean' && (t._count = t._count._all), t) } function Xo(e, t) { const r = jr(e); return t({ action: 'aggregate', unpacker: r, argsMapper: pt })(e) }f(); u(); c(); p(); m(); function gc(e = {}) { const { select: t, ...r } = e; return typeof t == 'object' ? pt({ ...r, _count: t }) : pt({ ...r, _count: { _all: !0 } }) } function hc(e = {}) { return typeof e.select == 'object' ? t => jr(e)(t)._count : t => jr(e)(t)._count._all } function es(e, t) { return t({ action: 'count', unpacker: hc(e), argsMapper: gc })(e) }f(); u(); c(); p(); m(); function yc(e = {}) {
  const t = pt(e); if (Array.isArray(t.by)) {
    for (const r of t.by) typeof r == 'string' && (t.select[r] = !0)
  }
  else {
    typeof t.by == 'string' && (t.select[t.by] = !0)
  } return t
} function wc(e = {}) { return t => (typeof e?._count == 'boolean' && t.forEach((r) => { r._count = r._count._all }), t) } function ts(e, t) { return t({ action: 'groupBy', unpacker: wc(e), argsMapper: yc })(e) } function rs(e, t, r) {
  if (t === 'aggregate')
    return n => Xo(n, r); if (t === 'count')
    return n => es(n, r); if (t === 'groupBy')
    return n => ts(n, r)
}f(); u(); c(); p(); m(); function ns(e, t) {
  const r = t.fields.filter(i => !i.relationName); const n = yo(r, 'name'); return new Proxy({}, { get(i, o) {
    if (o in i || typeof o == 'symbol')
      return i[o]; const s = n[o]; if (s)
      return new Ot(e, o, s.type, s.isList, s.kind === 'enum')
  }, ...qr(Object.keys(n)) })
}f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const is = e => Array.isArray(e) ? e : e.split('.'); const Nn = (e, t) => is(t).reduce((r, n) => r && r[n], e); const os = (e, t, r) => is(t).reduceRight((n, i, o, s) => Object.assign({}, Nn(e, s.slice(0, o)), { [i]: n }), r); function Ec(e, t) { return e === void 0 || t === void 0 ? [] : [...t, 'select', e] } function bc(e, t, r) { return t === void 0 ? e ?? {} : os(t, r, e || !0) } function Fn(e, t, r, n, i, o) {
  const a = e._runtimeDataModel.models[t].fields.reduce((l, d) => ({ ...l, [d.name]: d }), {}); return (l) => {
    const d = _e(e._errorFormat); const g = Ec(n, i); const h = bc(l, o, g); const v = r({ dataPath: g, callsite: d })(h); const S = xc(e, t); return new Proxy(v, { get(A, R) {
      if (!S.includes(R))
        return A[R]; const M = [a[R].type, r, R]; const B = [g, h]; return Fn(e, ...M, ...B)
    }, ...qr([...S, ...Object.getOwnPropertyNames(v)]) })
  }
} function xc(e, t) { return e._runtimeDataModel.models[t].fields.filter(r => r.kind === 'object').map(r => r.name) } const Pc = ['findUnique', 'findUniqueOrThrow', 'findFirst', 'findFirstOrThrow', 'create', 'update', 'upsert', 'delete']; const vc = ['aggregate', 'count', 'groupBy']; function Ln(e, t) { const r = e._extensions.getAllModelExtensions(t) ?? {}; const n = [Tc(e, t), Ac(e, t), Ut(r), ee('name', () => t), ee('$name', () => t), ee('$parent', () => e._appliedParent)]; return pe({}, n) } function Tc(e, t) { const r = we(t); const n = Object.keys(Rt).concat('count'); return { getKeys() { return n }, getPropertyValue(i) { const o = i; const s = a => (l) => { const d = _e(e._errorFormat); return e._createPrismaPromise((g) => { const h = { args: l, dataPath: [], action: o, model: t, clientMethod: `${r}.${i}`, jsModelName: r, transaction: g, callsite: d }; return e._request({ ...h, ...a }) }, { action: o, args: l, model: t }) }; return Pc.includes(o) ? Fn(e, t, s) : Cc(i) ? rs(e, i, s) : s({}) } } } function Cc(e) { return vc.includes(e) } function Ac(e, t) { return qe(ee('fields', () => { const r = e._runtimeDataModel.models[t]; return ns(t, r) })) }f(); u(); c(); p(); m(); function ss(e) { return e.replace(/^./, t => t.toUpperCase()) } const Bn = Symbol(); function $t(e) { const t = [Rc(e), Sc(e), ee(Bn, () => e), ee('$parent', () => e._appliedParent)]; const r = e._extensions.getAllClientExtensions(); return r && t.push(Ut(r)), pe(e, t) } function Rc(e) { const t = Object.getPrototypeOf(e._originalClient); const r = [...new Set(Object.getOwnPropertyNames(t))]; return { getKeys() { return r }, getPropertyValue(n) { return e[n] } } } function Sc(e) {
  const t = Object.keys(e._runtimeDataModel.models); const r = t.map(we); const n = [...new Set(t.concat(r))]; return qe({ getKeys() { return n }, getPropertyValue(i) {
    const o = ss(i); if (e._runtimeDataModel.models[o] !== void 0)
      return Ln(e, o); if (e._runtimeDataModel.models[i] !== void 0)
      return Ln(e, i)
  }, getPropertyDescriptor(i) {
    if (!r.includes(i))
      return { enumerable: !1 }
  } })
} function as(e) { return e[Bn] ? e[Bn] : e } function ls(e) {
  if (typeof e == 'function')
    return e(this); if (e.client?.__AccelerateEngine) { const r = e.client.__AccelerateEngine; this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig) } const t = Object.create(this._originalClient, { _extensions: { value: this._extensions.append(e) }, _appliedParent: { value: this, configurable: !0 }, $use: { value: void 0 }, $on: { value: void 0 } }); return $t(t)
}f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function us({ result: e, modelName: t, select: r, omit: n, extensions: i }) {
  const o = i.getAllComputedFields(t); if (!o)
    return e; const s = []; const a = []; for (const l of Object.values(o)) {
    if (n) {
      if (n[l.name])
        continue; const d = l.needs.filter(g => n[g]); d.length > 0 && a.push(ct(d))
    }
    else if (r) {
      if (!r[l.name])
        continue; const d = l.needs.filter(g => !r[g]); d.length > 0 && a.push(ct(d))
    }kc(e, l.needs) && s.push(Ic(l, pe(e, s)))
  } return s.length > 0 || a.length > 0 ? pe(e, [...s, ...a]) : e
} function kc(e, t) { return t.every(r => dn(e, r)) } function Ic(e, t) { return qe(ee(e.name, () => e.compute(t))) }f(); u(); c(); p(); m(); function Vr({ visitor: e, result: t, args: r, runtimeDataModel: n, modelName: i }) { if (Array.isArray(t)) { for (let s = 0; s < t.length; s++)t[s] = Vr({ result: t[s], args: r, modelName: i, runtimeDataModel: n, visitor: e }); return t } const o = e(t, i, r) ?? t; return r.include && cs({ includeOrSelect: r.include, result: o, parentModelName: i, runtimeDataModel: n, visitor: e }), r.select && cs({ includeOrSelect: r.select, result: o, parentModelName: i, runtimeDataModel: n, visitor: e }), o } function cs({ includeOrSelect: e, result: t, parentModelName: r, runtimeDataModel: n, visitor: i }) {
  for (const [o, s] of Object.entries(e)) {
    if (!s || t[o] == null || Ee(s))
      continue; const l = n.models[r].fields.find(g => g.name === o); if (!l || l.kind !== 'object' || !l.relationName)
      continue; const d = typeof s == 'object' ? s : {}; t[o] = Vr({ visitor: i, result: t[o], args: d, modelName: l.type, runtimeDataModel: n })
  }
} function ps({ result: e, modelName: t, args: r, extensions: n, runtimeDataModel: i, globalOmit: o }) { return n.isEmpty() || e == null || typeof e != 'object' || !i.models[t] ? e : Vr({ result: e, args: r ?? {}, modelName: t, runtimeDataModel: i, visitor: (a, l, d) => { const g = we(l); return us({ result: a, modelName: g, select: d.select, omit: d.select ? void 0 : { ...o?.[g], ...d.omit }, extensions: n }) } }) }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Oc = ['$connect', '$disconnect', '$on', '$transaction', '$use', '$extends']; const ms = Oc; function fs(e) {
  if (e instanceof le)
    return Dc(e); if (Fr(e))
    return Mc(e); if (Array.isArray(e)) { const r = [e[0]]; for (let n = 1; n < e.length; n++)r[n] = jt(e[n]); return r } const t = {}; for (const r in e)t[r] = jt(e[r]); return t
} function Dc(e) { return new le(e.strings, e.values) } function Mc(e) { return new qt(e.sql, e.values) } function jt(e) {
  if (typeof e != 'object' || e == null || e instanceof Te || at(e))
    return e; if (rt(e))
    return new ve(e.toFixed()); if (tt(e))
    return new Date(+e); if (ArrayBuffer.isView(e))
    return e.slice(0); if (Array.isArray(e)) { let t = e.length; let r; for (r = new Array(t); t--;)r[t] = jt(e[t]); return r } if (typeof e == 'object') { const t = {}; for (const r in e)r === '__proto__' ? Object.defineProperty(t, r, { value: jt(e[r]), configurable: !0, enumerable: !0, writable: !0 }) : t[r] = jt(e[r]); return t }xe(e, 'Unknown value')
} function gs(e, t, r, n = 0) { return e._createPrismaPromise((i) => { const o = t.customDataProxyFetch; return 'transaction' in t && i !== void 0 && (t.transaction?.kind === 'batch' && t.transaction.lock.then(), t.transaction = i), n === r.length ? e._executeRequest(t) : r[n]({ model: t.model, operation: t.model ? t.action : t.clientMethod, args: fs(t.args ?? {}), __internalParams: t, query: (s, a = t) => { const l = a.customDataProxyFetch; return a.customDataProxyFetch = Es(o, l), a.args = s, gs(e, a, r, n + 1) } }) }) } function hs(e, t) {
  const { jsModelName: r, action: n, clientMethod: i } = t; const o = r ? n : i; if (e._extensions.isEmpty())
    return e._executeRequest(t); const s = e._extensions.getAllQueryCallbacks(r ?? '$none', o); return gs(e, t, s)
} function ys(e) { return (t) => { const r = { requests: t }; const n = t[0].extensions.getAllBatchQueryCallbacks(); return n.length ? ws(r, n, 0, e) : e(r) } } function ws(e, t, r, n) {
  if (r === t.length)
    return n(e); const i = e.customDataProxyFetch; const o = e.requests[0].transaction; return t[r]({ args: { queries: e.requests.map(s => ({ model: s.modelName, operation: s.action, args: s.args })), transaction: o ? { isolationLevel: o.kind === 'batch' ? o.isolationLevel : void 0 } : void 0 }, __internalParams: e, query(s, a = e) { const l = a.customDataProxyFetch; return a.customDataProxyFetch = Es(i, l), ws(a, t, r + 1, n) } })
} const ds = e => e; function Es(e = ds, t = ds) { return r => e(t(r)) }f(); u(); c(); p(); m(); const bs = Y('prisma:client'); const xs = { 'Vercel': 'vercel', 'Netlify CI': 'netlify' }; function Ps({ postinstall: e, ciName: t, clientVersion: r }) {
  if (bs('checkPlatformCaching:postinstall', e), bs('checkPlatformCaching:ciName', t), e === !0 && t && t in xs) {
    const n = `Prisma has detected that this project was built on ${t}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \`prisma generate\` command during the build process.

Learn how: https://pris.ly/d/${xs[t]}-build`; throw console.error(n), new Q(n, r)
  }
}f(); u(); c(); p(); m(); function vs(e, t) { return e ? e.datasources ? e.datasources : e.datasourceUrl ? { [t[0]]: { url: e.datasourceUrl } } : {} : {} }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const _c = () => globalThis.process?.release?.name === 'node'; const Nc = () => !!globalThis.Bun || !!globalThis.process?.versions?.bun; const Fc = () => !!globalThis.Deno; const Lc = () => typeof globalThis.Netlify == 'object'; const Bc = () => typeof globalThis.EdgeRuntime == 'object'; const qc = () => globalThis.navigator?.userAgent === 'Cloudflare-Workers'; function Uc() { return [[Lc, 'netlify'], [Bc, 'edge-light'], [qc, 'workerd'], [Fc, 'deno'], [Nc, 'bun'], [_c, 'node']].flatMap(r => r[0]() ? [r[1]] : []).at(0) ?? '' } const $c = { 'node': 'Node.js', 'workerd': 'Cloudflare Workers', 'deno': 'Deno and Deno Deploy', 'netlify': 'Netlify Edge Functions', 'edge-light': 'Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)' }; function qn() { const e = Uc(); return { id: e, prettyName: $c[e] || e, isEdge: ['workerd', 'deno', 'netlify', 'edge-light'].includes(e) } }f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function mt({ inlineDatasources: e, overrideDatasources: t, env: r, clientVersion: n }) {
  let i; const o = Object.keys(e)[0]; const s = e[o]?.url; const a = t[o]?.url; if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = r[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) {
    throw qn().id === 'workerd'
      ? new Q(`error: Environment variable not found: ${s.fromEnvVar}.

In Cloudflare module Workers, environment variables are available only in the Worker's \`env\` parameter of \`fetch\`.
To solve this, provide the connection string directly: https://pris.ly/d/cloudflare-datasource-url`, n)
      : new Q(`error: Environment variable not found: ${s.fromEnvVar}.`, n)
  } if (i === void 0)
    throw new Q('error: Missing URL environment variable, value, or override.', n); return i
}f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Gr = class extends Error {clientVersion; cause; constructor(t, r) { super(t), this.clientVersion = r.clientVersion, this.cause = r.cause } get [Symbol.toStringTag]() { return this.name }}; const ne = class extends Gr {isRetryable; constructor(t, r) { super(t, r), this.isRetryable = r.isRetryable ?? !0 }}; f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); function L(e, t) { return { ...e, isRetryable: t } } const ft = class extends ne {name = 'ForcedRetryError'; code = 'P5001'; constructor(t) { super('This request must be retried', L(t, !0)) }}; N(ft, 'ForcedRetryError'); f(); u(); c(); p(); m(); const Ue = class extends ne {name = 'InvalidDatasourceError'; code = 'P6001'; constructor(t, r) { super(t, L(r, !1)) }}; N(Ue, 'InvalidDatasourceError'); f(); u(); c(); p(); m(); const $e = class extends ne {name = 'NotImplementedYetError'; code = 'P5004'; constructor(t, r) { super(t, L(r, !1)) }}; N($e, 'NotImplementedYetError'); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const V = class extends ne {response; constructor(t, r) { super(t, r), this.response = r.response; const n = this.response.headers.get('prisma-request-id'); if (n) { const i = `(The request id was: ${n})`; this.message = `${this.message} ${i}` } }}; const je = class extends V {name = 'SchemaMissingError'; code = 'P5005'; constructor(t) { super('Schema needs to be uploaded', L(t, !0)) }}; N(je, 'SchemaMissingError'); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Un = 'This request could not be understood by the server'; const Vt = class extends V {name = 'BadRequestError'; code = 'P5000'; constructor(t, r, n) { super(r || Un, L(t, !1)), n && (this.code = n) }}; N(Vt, 'BadRequestError'); f(); u(); c(); p(); m(); const Gt = class extends V {name = 'HealthcheckTimeoutError'; code = 'P5013'; logs; constructor(t, r) { super('Engine not started: healthcheck timeout', L(t, !0)), this.logs = r }}; N(Gt, 'HealthcheckTimeoutError'); f(); u(); c(); p(); m(); const Qt = class extends V {name = 'EngineStartupError'; code = 'P5014'; logs; constructor(t, r, n) { super(r, L(t, !0)), this.logs = n }}; N(Qt, 'EngineStartupError'); f(); u(); c(); p(); m(); const Jt = class extends V {name = 'EngineVersionNotSupportedError'; code = 'P5012'; constructor(t) { super('Engine version is not supported', L(t, !1)) }}; N(Jt, 'EngineVersionNotSupportedError'); f(); u(); c(); p(); m(); const $n = 'Request timed out'; const Wt = class extends V {name = 'GatewayTimeoutError'; code = 'P5009'; constructor(t, r = $n) { super(r, L(t, !1)) }}; N(Wt, 'GatewayTimeoutError'); f(); u(); c(); p(); m(); const jc = 'Interactive transaction error'; const Ht = class extends V {name = 'InteractiveTransactionError'; code = 'P5015'; constructor(t, r = jc) { super(r, L(t, !1)) }}; N(Ht, 'InteractiveTransactionError'); f(); u(); c(); p(); m(); const Vc = 'Request parameters are invalid'; const Kt = class extends V {name = 'InvalidRequestError'; code = 'P5011'; constructor(t, r = Vc) { super(r, L(t, !1)) }}; N(Kt, 'InvalidRequestError'); f(); u(); c(); p(); m(); const jn = 'Requested resource does not exist'; const zt = class extends V {name = 'NotFoundError'; code = 'P5003'; constructor(t, r = jn) { super(r, L(t, !1)) }}; N(zt, 'NotFoundError'); f(); u(); c(); p(); m(); const Vn = 'Unknown server error'; const dt = class extends V {name = 'ServerError'; code = 'P5006'; logs; constructor(t, r, n) { super(r || Vn, L(t, !0)), this.logs = n }}; N(dt, 'ServerError'); f(); u(); c(); p(); m(); const Gn = 'Unauthorized, check your connection string'; const Yt = class extends V {name = 'UnauthorizedError'; code = 'P5007'; constructor(t, r = Gn) { super(r, L(t, !1)) }}; N(Yt, 'UnauthorizedError'); f(); u(); c(); p(); m(); const Qn = 'Usage exceeded, retry again later'; const Zt = class extends V {name = 'UsageExceededError'; code = 'P5008'; constructor(t, r = Qn) { super(r, L(t, !0)) }}; N(Zt, 'UsageExceededError'); async function Gc(e) {
  let t; try { t = await e.text() }
  catch { return { type: 'EmptyError' } } try {
    const r = JSON.parse(t); if (typeof r == 'string')
      switch (r) { case 'InternalDataProxyError':return { type: 'DataProxyError', body: r }; default:return { type: 'UnknownTextError', body: r } } if (typeof r == 'object' && r !== null) {
      if ('is_panic' in r && 'message' in r && 'error_code' in r)
        return { type: 'QueryEngineError', body: r }; if ('EngineNotStarted' in r || 'InteractiveTransactionMisrouted' in r || 'InvalidRequestError' in r) { const n = Object.values(r)[0].reason; return typeof n == 'string' && !['SchemaMissing', 'EngineVersionNotSupported'].includes(n) ? { type: 'UnknownJsonError', body: r } : { type: 'DataProxyError', body: r } }
    } return { type: 'UnknownJsonError', body: r }
  }
  catch { return t === '' ? { type: 'EmptyError' } : { type: 'UnknownTextError', body: t } }
} async function Xt(e, t) {
  if (e.ok)
    return; const r = { clientVersion: t, response: e }; const n = await Gc(e); if (n.type === 'QueryEngineError')
    throw new oe(n.body.message, { code: n.body.error_code, clientVersion: t }); if (n.type === 'DataProxyError') {
    if (n.body === 'InternalDataProxyError')
      throw new dt(r, 'Internal Data Proxy error'); if ('EngineNotStarted' in n.body) {
      if (n.body.EngineNotStarted.reason === 'SchemaMissing')
        return new je(r); if (n.body.EngineNotStarted.reason === 'EngineVersionNotSupported')
        throw new Jt(r); if ('EngineStartupError' in n.body.EngineNotStarted.reason) { const { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError; throw new Qt(r, i, o) } if ('KnownEngineStartupError' in n.body.EngineNotStarted.reason) { const { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError; throw new Q(i, t, o) } if ('HealthcheckTimeout' in n.body.EngineNotStarted.reason) { const { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout; throw new Gt(r, i) }
    } if ('InteractiveTransactionMisrouted' in n.body) { const i = { IDParseError: 'Could not parse interactive transaction ID', NoQueryEngineFoundError: 'Could not find Query Engine for the specified host and transaction ID', TransactionStartError: 'Could not start interactive transaction' }; throw new Ht(r, i[n.body.InteractiveTransactionMisrouted.reason]) } if ('InvalidRequestError' in n.body)
      throw new Kt(r, n.body.InvalidRequestError.reason)
  } if (e.status === 401 || e.status === 403)
    throw new Yt(r, gt(Gn, n)); if (e.status === 404)
    return new zt(r, gt(jn, n)); if (e.status === 429)
    throw new Zt(r, gt(Qn, n)); if (e.status === 504)
    throw new Wt(r, gt($n, n)); if (e.status >= 500)
    throw new dt(r, gt(Vn, n)); if (e.status >= 400)
    throw new Vt(r, gt(Un, n))
} function gt(e, t) { return t.type === 'EmptyError' ? e : `${e}: ${JSON.stringify(t)}` }f(); u(); c(); p(); m(); function Ts(e) { const t = 2 ** e * 50; const r = Math.ceil(Math.random() * t) - Math.ceil(t / 2); const n = t + r; return new Promise(i => setTimeout(() => i(n), n)) }f(); u(); c(); p(); m(); const Ce = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; function Cs(e) { const t = new TextEncoder().encode(e); let r = ''; const n = t.byteLength; const i = n % 3; const o = n - i; let s; let a; let l; let d; let g; for (let h = 0; h < o; h = h + 3)g = t[h] << 16 | t[h + 1] << 8 | t[h + 2], s = (g & 16515072) >> 18, a = (g & 258048) >> 12, l = (g & 4032) >> 6, d = g & 63, r += Ce[s] + Ce[a] + Ce[l] + Ce[d]; return i == 1 ? (g = t[o], s = (g & 252) >> 2, a = (g & 3) << 4, r += `${Ce[s] + Ce[a]}==`) : i == 2 && (g = t[o] << 8 | t[o + 1], s = (g & 64512) >> 10, a = (g & 1008) >> 4, l = (g & 15) << 2, r += `${Ce[s] + Ce[a] + Ce[l]}=`), r }f(); u(); c(); p(); m(); function As(e) {
  if (e.generator?.previewFeatures.some(r => r.toLowerCase().includes('metrics')))
    throw new Q('The `metrics` preview feature is not yet available with Accelerate.\nPlease remove `metrics` from the `previewFeatures` in your schema.\n\nMore information about Accelerate: https://pris.ly/d/accelerate', e.clientVersion)
}f(); u(); c(); p(); m(); function Qc(e) { return e[0] * 1e3 + e[1] / 1e6 } function Jn(e) { return new Date(Qc(e)) }f(); u(); c(); p(); m(); const Rs = { '@prisma/debug': 'workspace:*', '@prisma/engines-version': '6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed', '@prisma/fetch-engine': 'workspace:*', '@prisma/get-platform': 'workspace:*' }; f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const er = class extends ne {
  name = 'RequestError'; code = 'P5010'; constructor(t, r) {
    super(`Cannot fetch data from service:
${t}`, L(r, !0))
  }
}; N(er, 'RequestError'); async function Ve(e, t, r = n => n) {
  const { clientVersion: n, ...i } = t; const o = r(fetch); try { return await o(e, i) }
  catch (s) { const a = s.message ?? 'Unknown error'; throw new er(a, { clientVersion: n, cause: s }) }
} const Wc = /^[1-9]\d*\.\d+\.\d+$/; const Ss = Y('prisma:client:dataproxyEngine'); async function Hc(e, t) {
  const r = Rs['@prisma/engines-version']; const n = t.clientVersion ?? 'unknown'; if (y.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION)
    return y.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION; if (e.includes('accelerate') && n !== '0.0.0' && n !== 'in-memory')
    return n; const [i, o] = n?.split('-') ?? []; if (o === void 0 && Wc.test(i))
    return i; if (o !== void 0 || n === '0.0.0' || n === 'in-memory') {
    if (e.startsWith('localhost') || e.startsWith('127.0.0.1'))
      return '0.0.0'; const [s] = r.split('-') ?? []; const [a, l, d] = s.split('.'); const g = Kc(`<=${a}.${l}.${d}`); const h = await Ve(g, { clientVersion: n }); if (!h.ok)
      throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${h.status} ${h.statusText}, response body: ${await h.text() || '<empty body>'}`); const v = await h.text(); Ss('length of body fetched from unpkg.com', v.length); let S; try { S = JSON.parse(v) }
    catch (A) { throw console.error('JSON.parse error: body fetched from unpkg.com: ', v), A } return S.version
  } throw new $e('Only `major.minor.patch` versions are supported by Accelerate.', { clientVersion: n })
} async function ks(e, t) { const r = await Hc(e, t); return Ss('version', r), r } function Kc(e) { return encodeURI(`https://unpkg.com/prisma@${e}/package.json`) } const Is = 3; const Qr = Y('prisma:client:dataproxyEngine'); const Wn = class {apiKey; tracingHelper; logLevel; logQueries; engineHash; constructor({ apiKey: t, tracingHelper: r, logLevel: n, logQueries: i, engineHash: o }) { this.apiKey = t, this.tracingHelper = r, this.logLevel = n, this.logQueries = i, this.engineHash = o }build({ traceparent: t, interactiveTransaction: r } = {}) { const n = { 'Authorization': `Bearer ${this.apiKey}`, 'Prisma-Engine-Hash': this.engineHash }; this.tracingHelper.isEnabled() && (n.traceparent = t ?? this.tracingHelper.getTraceParent()), r && (n['X-transaction-id'] = r.id); const i = this.buildCaptureSettings(); return i.length > 0 && (n['X-capture-telemetry'] = i.join(', ')), n }buildCaptureSettings() { const t = []; return this.tracingHelper.isEnabled() && t.push('tracing'), this.logLevel && t.push(this.logLevel), this.logQueries && t.push('query'), t }}; const ht = class {
  name = 'DataProxyEngine'; inlineSchema; inlineSchemaHash; inlineDatasources; config; logEmitter; env; clientVersion; engineHash; tracingHelper; remoteClientVersion; host; headerBuilder; startPromise; constructor(t) { As(t), this.config = t, this.env = { ...t.env, ...typeof y < 'u' ? y.env : {} }, this.inlineSchema = Cs(t.inlineSchema), this.inlineDatasources = t.inlineDatasources, this.inlineSchemaHash = t.inlineSchemaHash, this.clientVersion = t.clientVersion, this.engineHash = t.engineVersion, this.logEmitter = t.logEmitter, this.tracingHelper = t.tracingHelper }apiKey() { return this.headerBuilder.apiKey }version() { return this.engineHash } async start() { this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async () => { const [t, r] = this.extractHostAndApiKey(); this.host = t, this.headerBuilder = new Wn({ apiKey: r, tracingHelper: this.tracingHelper, logLevel: this.config.logLevel, logQueries: this.config.logQueries, engineHash: this.engineHash }), this.remoteClientVersion = await ks(t, this.config), Qr('host', this.host) })(), await this.startPromise } async stop() {}propagateResponseExtensions(t) { t?.logs?.length && t.logs.forEach((r) => { switch (r.level) { case 'debug':case 'trace':Qr(r); break; case 'error':case 'warn':case 'info':{ this.logEmitter.emit(r.level, { timestamp: Jn(r.timestamp), message: r.attributes.message ?? '', target: r.target }); break } case 'query':{ this.logEmitter.emit('query', { query: r.attributes.query ?? '', timestamp: Jn(r.timestamp), duration: r.attributes.duration_ms ?? 0, params: r.attributes.params ?? '', target: r.target }); break } default:r.level } }), t?.traces?.length && this.tracingHelper.dispatchEngineSpans(t.traces) }onBeforeExit() { throw new Error('"beforeExit" hook is not applicable to the remote query engine') } async url(t) { return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t}` } async uploadSchema() {
    const t = { name: 'schemaUpload', internal: !0 }; return this.tracingHelper.runInChildSpan(t, async () => {
      const r = await Ve(await this.url('schema'), { method: 'PUT', headers: this.headerBuilder.build(), body: this.inlineSchema, clientVersion: this.clientVersion }); r.ok || Qr('schema response status', r.status); const n = await Xt(r, this.clientVersion); if (n)
        throw this.logEmitter.emit('warn', { message: `Error while uploading schema: ${n.message}`, timestamp: new Date(), target: '' }), n; this.logEmitter.emit('info', { message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`, timestamp: new Date(), target: '' })
    })
  }

  request(t, { traceparent: r, interactiveTransaction: n, customDataProxyFetch: i }) { return this.requestInternal({ body: t, traceparent: r, interactiveTransaction: n, customDataProxyFetch: i }) } async requestBatch(t, { traceparent: r, transaction: n, customDataProxyFetch: i }) { const o = n?.kind === 'itx' ? n.options : void 0; const s = Ur(t, n); return (await this.requestInternal({ body: s, customDataProxyFetch: i, interactiveTransaction: o, traceparent: r })).map(l => (l.extensions && this.propagateResponseExtensions(l.extensions), 'errors' in l ? this.convertProtocolErrorsToClientError(l.errors) : l)) }requestInternal({ body: t, traceparent: r, customDataProxyFetch: n, interactiveTransaction: i }) {
    return this.withRetry({ actionGerund: 'querying', callback: async ({ logHttpCall: o }) => {
      const s = i ? `${i.payload.endpoint}/graphql` : await this.url('graphql'); o(s); const a = await Ve(s, { method: 'POST', headers: this.headerBuilder.build({ traceparent: r, interactiveTransaction: i }), body: JSON.stringify(t), clientVersion: this.clientVersion }, n); a.ok || Qr('graphql response status', a.status), await this.handleError(await Xt(a, this.clientVersion)); const l = await a.json(); if (l.extensions && this.propagateResponseExtensions(l.extensions), 'errors' in l)
        throw this.convertProtocolErrorsToClientError(l.errors); return 'batchResult' in l ? l.batchResult : l
    } })
  }

  async transaction(t, r, n) {
    const i = { start: 'starting', commit: 'committing', rollback: 'rolling back' }; return this.withRetry({ actionGerund: `${i[t]} transaction`, callback: async ({ logHttpCall: o }) => {
      if (t === 'start') { const s = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel }); const a = await this.url('transaction/start'); o(a); const l = await Ve(a, { method: 'POST', headers: this.headerBuilder.build({ traceparent: r.traceparent }), body: s, clientVersion: this.clientVersion }); await this.handleError(await Xt(l, this.clientVersion)); const d = await l.json(); const { extensions: g } = d; g && this.propagateResponseExtensions(g); const h = d.id; const v = d['data-proxy'].endpoint; return { id: h, payload: { endpoint: v } } }
      else { const s = `${n.payload.endpoint}/${t}`; o(s); const a = await Ve(s, { method: 'POST', headers: this.headerBuilder.build({ traceparent: r.traceparent }), clientVersion: this.clientVersion }); await this.handleError(await Xt(a, this.clientVersion)); const l = await a.json(); const { extensions: d } = l; d && this.propagateResponseExtensions(d) }
    } })
  }

  extractHostAndApiKey() {
    const t = { clientVersion: this.clientVersion }; const r = Object.keys(this.inlineDatasources)[0]; const n = mt({ inlineDatasources: this.inlineDatasources, overrideDatasources: this.config.overrideDatasources, clientVersion: this.clientVersion, env: this.env }); let i; try { i = new URL(n) }
    catch { throw new Ue(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t) } const { protocol: o, host: s, searchParams: a } = i; if (o !== 'prisma:' && o !== pr)
      throw new Ue(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t); const l = a.get('api_key'); if (l === null || l.length < 1)
      throw new Ue(`Error validating datasource \`${r}\`: the URL must contain a valid API key`, t); return [s, l]
  }

  metrics() { throw new $e('Metrics are not yet supported for Accelerate', { clientVersion: this.clientVersion }) } async withRetry(t) {
    for (let r = 0; ;r++) {
      const n = (i) => { this.logEmitter.emit('info', { message: `Calling ${i} (n=${r})`, timestamp: new Date(), target: '' }) }; try { return await t.callback({ logHttpCall: n }) }
      catch (i) {
        if (!(i instanceof ne) || !i.isRetryable)
          throw i; if (r >= Is)
          throw i instanceof ft ? i.cause : i; this.logEmitter.emit('warn', { message: `Attempt ${r + 1}/${Is} failed for ${t.actionGerund}: ${i.message ?? '(unknown)'}`, timestamp: new Date(), target: '' }); const o = await Ts(r); this.logEmitter.emit('warn', { message: `Retrying after ${o}ms`, timestamp: new Date(), target: '' })
      }
    }
  }

  async handleError(t) {
    if (t instanceof je)
      throw await this.uploadSchema(), new ft({ clientVersion: this.clientVersion, cause: t }); if (t)
      throw t
  }

  convertProtocolErrorsToClientError(t) { return t.length === 1 ? $r(t[0], this.config.clientVersion, this.config.activeProvider) : new se(JSON.stringify(t), { clientVersion: this.config.clientVersion }) }applyPendingMigrations() { throw new Error('Method not implemented.') }
}; function Os({ copyEngine: e = !0 }, t) {
  let r; try { r = mt({ inlineDatasources: t.inlineDatasources, overrideDatasources: t.overrideDatasources, env: { ...t.env, ...y.env }, clientVersion: t.clientVersion }) }
  catch {} const n = !!(r?.startsWith('prisma://') || mn(r)); e && n && mr('recommend--no-engine', 'In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)'); const i = Ye(t.generator); const o = n || !e; const s = !!t.adapter; const a = i === 'library'; const l = i === 'binary'; const d = i === 'client'; if (o && s || s) {
    let g; throw g = ['Prisma Client was configured to use the `adapter` option but it was imported via its `/edge` endpoint.', 'Please either remove the `/edge` endpoint or remove the `adapter` from the Prisma Client constructor.'], new X(g.join(`
`), { clientVersion: t.clientVersion })
  } return o ? new ht(t) : new ht(t)
}f(); u(); c(); p(); m(); function Jr({ generator: e }) { return e?.previewFeatures ?? [] }f(); u(); c(); p(); m(); const Ds = e => ({ command: e }); f(); u(); c(); p(); m(); f(); u(); c(); p(); m(); const Ms = e => e.strings.reduce((t, r, n) => `${t}@P${n}${r}`); f(); u(); c(); p(); m(); function yt(e) {
  try { return _s(e, 'fast') }
  catch { return _s(e, 'slow') }
} function _s(e, t) { return JSON.stringify(e.map(r => Fs(r, t))) } function Fs(e, t) {
  if (Array.isArray(e))
    return e.map(r => Fs(r, t)); if (typeof e == 'bigint')
    return { prisma__type: 'bigint', prisma__value: e.toString() }; if (tt(e))
    return { prisma__type: 'date', prisma__value: e.toJSON() }; if (ve.isDecimal(e))
    return { prisma__type: 'decimal', prisma__value: e.toJSON() }; if (w.Buffer.isBuffer(e))
    return { prisma__type: 'bytes', prisma__value: e.toString('base64') }; if (zc(e))
    return { prisma__type: 'bytes', prisma__value: w.Buffer.from(e).toString('base64') }; if (ArrayBuffer.isView(e)) { const { buffer: r, byteOffset: n, byteLength: i } = e; return { prisma__type: 'bytes', prisma__value: w.Buffer.from(r, n, i).toString('base64') } } return typeof e == 'object' && t === 'slow' ? Ls(e) : e
} function zc(e) { return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? !0 : typeof e == 'object' && e !== null ? e[Symbol.toStringTag] === 'ArrayBuffer' || e[Symbol.toStringTag] === 'SharedArrayBuffer' : !1 } function Ls(e) {
  if (typeof e != 'object' || e === null)
    return e; if (typeof e.toJSON == 'function')
    return e.toJSON(); if (Array.isArray(e))
    return e.map(Ns); const t = {}; for (const r of Object.keys(e))t[r] = Ns(e[r]); return t
} function Ns(e) { return typeof e == 'bigint' ? e.toString() : Ls(e) } const Yc = /^(\s*alter\s)/i; const Bs = Y('prisma:client'); function Hn(e, t, r, n) {
  if (!(e !== 'postgresql' && e !== 'cockroachdb') && r.length > 0 && Yc.exec(t)) {
    throw new Error(`Running ALTER using ${n} is not supported
Using the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.

Example:
  await prisma.$executeRawUnsafe(\`ALTER USER prisma WITH PASSWORD '\${password}'\`)

More Information: https://pris.ly/d/execute-raw
`)
  }
} function Kn({ clientMethod: e, activeProvider: t }) {
  return (r) => {
    let n = ''; let i; if (Fr(r)) {
      n = r.sql, i = { values: yt(r.values), __prismaRawParameters__: !0 }
    }
    else if (Array.isArray(r)) { const [o, ...s] = r; n = o, i = { values: yt(s || []), __prismaRawParameters__: !0 } }
    else {
      switch (t) { case 'sqlite':case 'mysql':{ n = r.sql, i = { values: yt(r.values), __prismaRawParameters__: !0 }; break } case 'cockroachdb':case 'postgresql':case 'postgres':{ n = r.text, i = { values: yt(r.values), __prismaRawParameters__: !0 }; break } case 'sqlserver':{ n = Ms(r), i = { values: yt(r.values), __prismaRawParameters__: !0 }; break } default:throw new Error(`The ${t} provider does not support ${e}`) }
    } return i?.values ? Bs(`prisma.${e}(${n}, ${i.values})`) : Bs(`prisma.${e}(${n})`), { query: n, parameters: i }
  }
} const qs = { requestArgsToMiddlewareArgs(e) { return [e.strings, ...e.values] }, middlewareArgsToRequestArgs(e) { const [t, ...r] = e; return new le(t, r) } }; const Us = { requestArgsToMiddlewareArgs(e) { return [e] }, middlewareArgsToRequestArgs(e) { return e[0] } }; f(); u(); c(); p(); m(); function zn(e) {
  return function (r, n) {
    let i; const o = (s = e) => {
      try { return s === void 0 || s?.kind === 'itx' ? i ??= $s(r(s)) : $s(r(s)) }
      catch (a) { return Promise.reject(a) }
    }; return { get spec() { return n }, then(s, a) { return o().then(s, a) }, catch(s) { return o().catch(s) }, finally(s) { return o().finally(s) }, requestTransaction(s) { const a = o(s); return a.requestTransaction ? a.requestTransaction(s) : a }, [Symbol.toStringTag]: 'PrismaPromise' }
  }
} function $s(e) { return typeof e.then == 'function' ? e : Promise.resolve(e) }f(); u(); c(); p(); m(); const Zc = pn.split('.')[0]; const Xc = { isEnabled() { return !1 }, getTraceParent() { return '00-10-10-00' }, dispatchEngineSpans() {}, getActiveContext() {}, runInChildSpan(e, t) { return t() } }; const Yn = class {isEnabled() { return this.getGlobalTracingHelper().isEnabled() }getTraceParent(t) { return this.getGlobalTracingHelper().getTraceParent(t) }dispatchEngineSpans(t) { return this.getGlobalTracingHelper().dispatchEngineSpans(t) }getActiveContext() { return this.getGlobalTracingHelper().getActiveContext() }runInChildSpan(t, r) { return this.getGlobalTracingHelper().runInChildSpan(t, r) }getGlobalTracingHelper() { const t = globalThis[`V${Zc}_PRISMA_INSTRUMENTATION`]; const r = globalThis.PRISMA_INSTRUMENTATION; return t?.helper ?? r?.helper ?? Xc }}; function js() { return new Yn() }f(); u(); c(); p(); m(); function Vs(e, t = () => {}) { let r; const n = new Promise(i => r = i); return { then(i) { return --e === 0 && r(t()), i?.(n) } } }f(); u(); c(); p(); m(); function Gs(e) { return typeof e == 'string' ? e : e.reduce((t, r) => { const n = typeof r == 'string' ? r : r.level; return n === 'query' ? t : t && (r === 'info' || t === 'info') ? 'info' : n }, void 0) }f(); u(); c(); p(); m(); const Wr = class {_middlewares = []; use(t) { this._middlewares.push(t) }get(t) { return this._middlewares[t] }has(t) { return !!this._middlewares[t] }length() { return this._middlewares.length }}; f(); u(); c(); p(); m(); const Js = Qe(Xi()); f(); u(); c(); p(); m(); function Hr(e) { return typeof e.batchRequestIdx == 'number' }f(); u(); c(); p(); m(); function Qs(e) {
  if (e.action !== 'findUnique' && e.action !== 'findUniqueOrThrow')
    return; const t = []; return e.modelName && t.push(e.modelName), e.query.arguments && t.push(Zn(e.query.arguments)), t.push(Zn(e.query.selection)), t.join('')
} function Zn(e) { return `(${Object.keys(e).sort().map((r) => { const n = e[r]; return typeof n == 'object' && n !== null ? `(${r} ${Zn(n)})` : r }).join(' ')})` }f(); u(); c(); p(); m(); const ep = { aggregate: !1, aggregateRaw: !1, createMany: !0, createManyAndReturn: !0, createOne: !0, deleteMany: !0, deleteOne: !0, executeRaw: !0, findFirst: !1, findFirstOrThrow: !1, findMany: !1, findRaw: !1, findUnique: !1, findUniqueOrThrow: !1, groupBy: !1, queryRaw: !1, runCommandRaw: !0, updateMany: !0, updateManyAndReturn: !0, updateOne: !0, upsertOne: !0 }; function Xn(e) { return ep[e] }f(); u(); c(); p(); m(); const Kr = class {
  constructor(t) { this.options = t; this.batches = {} }batches; tickActive = !1; request(t) { const r = this.options.batchBy(t); return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = !0, y.nextTick(() => { this.dispatchBatches(), this.tickActive = !1 }))), new Promise((n, i) => { this.batches[r].push({ request: t, resolve: n, reject: i }) })) : this.options.singleLoader(t) }dispatchBatches() {
    for (const t in this.batches) {
      const r = this.batches[t]; delete this.batches[t], r.length === 1
        ? this.options.singleLoader(r[0].request).then((n) => { n instanceof Error ? r[0].reject(n) : r[0].resolve(n) }).catch((n) => { r[0].reject(n) })
        : (r.sort((n, i) => this.options.batchOrder(n.request, i.request)), this.options.batchLoader(r.map(n => n.request)).then((n) => {
            if (n instanceof Error) {
              for (let i = 0; i < r.length; i++)r[i].reject(n)
            }
            else {
              for (let i = 0; i < r.length; i++) { const o = n[i]; o instanceof Error ? r[i].reject(o) : r[i].resolve(o) }
            }
          }).catch((n) => { for (let i = 0; i < r.length; i++)r[i].reject(n) }))
    }
  }

  get [Symbol.toStringTag]() { return 'DataLoader' }
}; f(); u(); c(); p(); m(); function Ge(e, t) {
  if (t === null)
    return t; switch (e) { case 'bigint':return BigInt(t); case 'bytes':{ const { buffer: r, byteOffset: n, byteLength: i } = w.Buffer.from(t, 'base64'); return new Uint8Array(r, n, i) } case 'decimal':return new ve(t); case 'datetime':case 'date':return new Date(t); case 'time':return new Date(`1970-01-01T${t}Z`); case 'bigint-array':return t.map(r => Ge('bigint', r)); case 'bytes-array':return t.map(r => Ge('bytes', r)); case 'decimal-array':return t.map(r => Ge('decimal', r)); case 'datetime-array':return t.map(r => Ge('datetime', r)); case 'date-array':return t.map(r => Ge('date', r)); case 'time-array':return t.map(r => Ge('time', r)); default:return t }
} function ei(e) { const t = []; const r = tp(e); for (let n = 0; n < e.rows.length; n++) { const i = e.rows[n]; const o = { ...r }; for (let s = 0; s < i.length; s++)o[e.columns[s]] = Ge(e.types[s], i[s]); t.push(o) } return t } function tp(e) { const t = {}; for (let r = 0; r < e.columns.length; r++)t[e.columns[r]] = null; return t } const rp = Y('prisma:client:request_handler'); const zr = class {
  client; dataloader; logEmitter; constructor(t, r) {
    this.logEmitter = r, this.client = t, this.dataloader = new Kr({ batchLoader: ys(async ({ requests: n, customDataProxyFetch: i }) => {
      const { transaction: o, otelParentCtx: s } = n[0]; const a = n.map(h => h.protocolQuery); const l = this.client._tracingHelper.getTraceParent(s); const d = n.some(h => Xn(h.protocolQuery.action)); return (await this.client._engine.requestBatch(a, { traceparent: l, transaction: np(o), containsWrite: d, customDataProxyFetch: i })).map((h, v) => {
        if (h instanceof Error)
          return h; try { return this.mapQueryEngineResult(n[v], h) }
        catch (S) { return S }
      })
    }), singleLoader: async (n) => { const i = n.transaction?.kind === 'itx' ? Ws(n.transaction) : void 0; const o = await this.client._engine.request(n.protocolQuery, { traceparent: this.client._tracingHelper.getTraceParent(), interactiveTransaction: i, isWrite: Xn(n.protocolQuery.action), customDataProxyFetch: n.customDataProxyFetch }); return this.mapQueryEngineResult(n, o) }, batchBy: n => n.transaction?.id ? `transaction-${n.transaction.id}` : Qs(n.protocolQuery), batchOrder(n, i) { return n.transaction?.kind === 'batch' && i.transaction?.kind === 'batch' ? n.transaction.index - i.transaction.index : 0 } })
  }

  async request(t) {
    try { return await this.dataloader.request(t) }
    catch (r) { const { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = t; this.handleAndLogRequestError({ error: r, clientMethod: n, callsite: i, transaction: o, args: s, modelName: a, globalOmit: t.globalOmit }) }
  }

  mapQueryEngineResult({ dataPath: t, unpacker: r }, n) { const i = n?.data; const o = this.unpack(i, t, r); return y.env.PRISMA_CLIENT_GET_TIME ? { data: o } : o }handleAndLogRequestError(t) {
    try { this.handleRequestError(t) }
    catch (r) { throw this.logEmitter && this.logEmitter.emit('error', { message: r.message, target: t.clientMethod, timestamp: new Date() }), r }
  }

  handleRequestError({ error: t, clientMethod: r, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {
    if (rp(t), ip(t, i))
      throw t; if (t instanceof oe && op(t)) { const d = Hs(t.meta); Dr({ args: o, errors: [d], callsite: n, errorFormat: this.client._errorFormat, originalMethod: r, clientVersion: this.client._clientVersion, globalOmit: a }) } let l = t.message; if (n && (l = vr({ callsite: n, originalMethod: r, isPanic: t.isPanic, showColors: this.client._errorFormat === 'pretty', message: l })), l = this.sanitizeMessage(l), t.code) { const d = s ? { modelName: s, ...t.meta } : t.meta; throw new oe(l, { code: t.code, clientVersion: this.client._clientVersion, meta: d, batchRequestIdx: t.batchRequestIdx }) }
    else {
      if (t.isPanic)
        throw new Re(l, this.client._clientVersion); if (t instanceof se)
        throw new se(l, { clientVersion: this.client._clientVersion, batchRequestIdx: t.batchRequestIdx }); if (t instanceof Q)
        throw new Q(l, this.client._clientVersion); if (t instanceof Re)
        throw new Re(l, this.client._clientVersion)
    } throw t.clientVersion = this.client._clientVersion, t
  }

  sanitizeMessage(t) { return this.client._errorFormat && this.client._errorFormat !== 'pretty' ? (0, Js.default)(t) : t }unpack(t, r, n) {
    if (!t || (t.data && (t = t.data), !t))
      return t; const i = Object.keys(t)[0]; const o = Object.values(t)[0]; const s = r.filter(d => d !== 'select' && d !== 'include'); const a = Nn(o, s); const l = i === 'queryRaw' ? ei(a) : Ct(a); return n ? n(l) : l
  }

  get [Symbol.toStringTag]() { return 'RequestHandler' }
}; function np(e) {
  if (e) {
    if (e.kind === 'batch')
      return { kind: 'batch', options: { isolationLevel: e.isolationLevel } }; if (e.kind === 'itx')
      return { kind: 'itx', options: Ws(e) }; xe(e, 'Unknown transaction kind')
  }
} function Ws(e) { return { id: e.id, payload: e.payload } } function ip(e, t) { return Hr(e) && t?.kind === 'batch' && e.batchRequestIdx !== t.index } function op(e) { return e.code === 'P2009' || e.code === 'P2012' } function Hs(e) {
  if (e.kind === 'Union')
    return { kind: 'Union', errors: e.errors.map(Hs) }; if (Array.isArray(e.selectionPath)) { const [,...t] = e.selectionPath; return { ...e, selectionPath: t } } return e
}f(); u(); c(); p(); m(); const Ks = '6.7.0'; const zs = Ks; f(); u(); c(); p(); m(); const ta = Qe(Pn()); f(); u(); c(); p(); m(); const q = class extends Error {
  constructor(t) {
    super(`${t}
Read more at https://pris.ly/d/client-constructor`), this.name = 'PrismaClientConstructorValidationError'
  }

  get [Symbol.toStringTag]() { return 'PrismaClientConstructorValidationError' }
}; N(q, 'PrismaClientConstructorValidationError'); const Ys = ['datasources', 'datasourceUrl', 'errorFormat', 'adapter', 'log', 'transactionOptions', 'omit', '__internal']; const Zs = ['pretty', 'colorless', 'minimal']; const Xs = ['info', 'query', 'warn', 'error']; const ap = { datasources: (e, { datasourceNames: t }) => {
  if (e) {
    if (typeof e != 'object' || Array.isArray(e))
      throw new q(`Invalid value ${JSON.stringify(e)} for "datasources" provided to PrismaClient constructor`); for (const [r, n] of Object.entries(e)) {
      if (!t.includes(r)) { const i = wt(r, t) || ` Available datasources: ${t.join(', ')}`; throw new q(`Unknown datasource ${r} provided to PrismaClient constructor.${i}`) } if (typeof n != 'object' || Array.isArray(n)) {
        throw new q(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`)
      } if (n && typeof n == 'object') {
        for (const [i, o] of Object.entries(n)) {
          if (i !== 'url') {
            throw new q(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`)
          } if (typeof o != 'string') {
            throw new q(`Invalid value ${JSON.stringify(o)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`)
          }
        }
      }
    }
  }
}, adapter: (e, t) => {
  if (!e && Ye(t.generator) === 'client')
    throw new q('Using engine type "client" requires a driver adapter to be provided to PrismaClient constructor.'); if (e === null)
    return; if (e === void 0)
    throw new q('"adapter" property must not be undefined, use null to conditionally disable driver adapters.'); if (!Jr(t).includes('driverAdapters'))
    throw new q('"adapter" property can only be provided to PrismaClient constructor when "driverAdapters" preview feature is enabled.'); if (Ye(t.generator) === 'binary')
    throw new q('Cannot use a driver adapter with the "binary" Query Engine. Please use the "library" Query Engine.')
}, datasourceUrl: (e) => {
  if (typeof e < 'u' && typeof e != 'string') {
    throw new q(`Invalid value ${JSON.stringify(e)} for "datasourceUrl" provided to PrismaClient constructor.
Expected string or undefined.`)
  }
}, errorFormat: (e) => {
  if (e) {
    if (typeof e != 'string')
      throw new q(`Invalid value ${JSON.stringify(e)} for "errorFormat" provided to PrismaClient constructor.`); if (!Zs.includes(e)) { const t = wt(e, Zs); throw new q(`Invalid errorFormat ${e} provided to PrismaClient constructor.${t}`) }
  }
}, log: (e) => {
  if (!e)
    return; if (!Array.isArray(e))
    throw new q(`Invalid value ${JSON.stringify(e)} for "log" provided to PrismaClient constructor.`); function t(r) { if (typeof r == 'string' && !Xs.includes(r)) { const n = wt(r, Xs); throw new q(`Invalid log level "${r}" provided to PrismaClient constructor.${n}`) } } for (const r of e) {
    t(r); const n = { level: t, emit: (i) => { const o = ['stdout', 'event']; if (!o.includes(i)) { const s = wt(i, o); throw new q(`Invalid value ${JSON.stringify(i)} for "emit" in logLevel provided to PrismaClient constructor.${s}`) } } }; if (r && typeof r == 'object') {
      for (const [i, o] of Object.entries(r)) {
        if (n[i])
          n[i](o); else throw new q(`Invalid property ${i} for "log" provided to PrismaClient constructor`)
      }
    }
  }
}, transactionOptions: (e) => {
  if (!e)
    return; const t = e.maxWait; if (t != null && t <= 0)
    throw new q(`Invalid value ${t} for maxWait in "transactionOptions" provided to PrismaClient constructor. maxWait needs to be greater than 0`); const r = e.timeout; if (r != null && r <= 0)
    throw new q(`Invalid value ${r} for timeout in "transactionOptions" provided to PrismaClient constructor. timeout needs to be greater than 0`)
}, omit: (e, t) => {
  if (typeof e != 'object')
    throw new q('"omit" option is expected to be an object.'); if (e === null)
    throw new q('"omit" option can not be `null`'); const r = []; for (const [n, i] of Object.entries(e)) { const o = up(n, t.runtimeDataModel); if (!o) { r.push({ kind: 'UnknownModel', modelKey: n }); continue } for (const [s, a] of Object.entries(i)) { const l = o.fields.find(d => d.name === s); if (!l) { r.push({ kind: 'UnknownField', modelKey: n, fieldName: s }); continue } if (l.relationName) { r.push({ kind: 'RelationInOmit', modelKey: n, fieldName: s }); continue } typeof a != 'boolean' && r.push({ kind: 'InvalidFieldValue', modelKey: n, fieldName: s }) } } if (r.length > 0)
    throw new q(cp(e, r))
}, __internal: (e) => {
  if (!e)
    return; const t = ['debug', 'engine', 'configOverride']; if (typeof e != 'object')
    throw new q(`Invalid value ${JSON.stringify(e)} for "__internal" to PrismaClient constructor`); for (const [r] of Object.entries(e)) {
    if (!t.includes(r)) { const n = wt(r, t); throw new q(`Invalid property ${JSON.stringify(r)} for "__internal" provided to PrismaClient constructor.${n}`) }
  }
} }; function ra(e, t) {
  for (const [r, n] of Object.entries(e)) { if (!Ys.includes(r)) { const i = wt(r, Ys); throw new q(`Unknown property ${r} provided to PrismaClient constructor.${i}`) }ap[r](n, t) } if (e.datasourceUrl && e.datasources)
    throw new q('Can not use "datasourceUrl" and "datasources" options at the same time. Pick one of them')
} function wt(e, t) {
  if (t.length === 0 || typeof e != 'string')
    return ''; const r = lp(e, t); return r ? ` Did you mean "${r}"?` : ''
} function lp(e, t) {
  if (t.length === 0)
    return null; const r = t.map(i => ({ value: i, distance: (0, ta.default)(e, i) })); r.sort((i, o) => i.distance < o.distance ? -1 : 1); const n = r[0]; return n.distance < 3 ? n.value : null
} function up(e, t) { return ea(t.models, e) ?? ea(t.types, e) } function ea(e, t) {
  const r = Object.keys(e).find(n => De(n) === t); if (r)
    return e[r]
} function cp(e, t) {
  const r = lt(e); for (const o of t) switch (o.kind) { case 'UnknownModel':r.arguments.getField(o.modelKey)?.markAsError(), r.addErrorMessage(() => `Unknown model name: ${o.modelKey}.`); break; case 'UnknownField':r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => `Model "${o.modelKey}" does not have a field named "${o.fieldName}".`); break; case 'RelationInOmit':r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => 'Relations are already excluded by default and can not be specified in "omit".'); break; case 'InvalidFieldValue':r.arguments.getDeepFieldValue([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => 'Omit field option value must be a boolean.'); break } const { message: n, args: i } = Or(r, 'colorless'); return `Error validating "omit" option:

${i}

${n}`
}f(); u(); c(); p(); m(); function na(e) { return e.length === 0 ? Promise.resolve([]) : new Promise((t, r) => { const n = Array.from({ length: e.length }); let i = null; let o = !1; let s = 0; const a = () => { o || (s++, s === e.length && (o = !0, i ? r(i) : t(n))) }; const l = (d) => { o || (o = !0, r(d)) }; for (let d = 0; d < e.length; d++)e[d].then((g) => { n[d] = g, a() }, (g) => { if (!Hr(g)) { l(g); return }g.batchRequestIdx === d ? l(g) : (i || (i = g), a()) }) }) } const Ne = Y('prisma:client'); typeof globalThis == 'object' && (globalThis.NODE_CLIENT = !0); const pp = { requestArgsToMiddlewareArgs: e => e, middlewareArgsToRequestArgs: e => e }; const mp = Symbol.for('prisma.client.transaction.id'); const fp = { id: 0, nextId() { return ++this.id } }; function dp(e) {
  class t {
    _originalClient = this; _runtimeDataModel; _requestHandler; _connectionPromise; _disconnectionPromise; _engineConfig; _accelerateEngineConfig; _clientVersion; _errorFormat; _tracingHelper; _middlewares = new Wr(); _previewFeatures; _activeProvider; _globalOmit; _extensions; _engine; _appliedParent; _createPrismaPromise = zn(); constructor(n) {
      e = n?.__internal?.configOverride?.(e) ?? e, Ps(e), n && ra(n, e); const i = new Lr().on('error', () => {}); this._extensions = ut.empty(), this._previewFeatures = Jr(e), this._clientVersion = e.clientVersion ?? zs, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = js(); const o = e.relativeEnvPaths && { rootEnvPath: e.relativeEnvPaths.rootEnvPath && cr.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath), schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && cr.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath) }; let s; if (n?.adapter) {
        s = n.adapter; const l = e.activeProvider === 'postgresql' ? 'postgres' : e.activeProvider; if (s.provider !== l)
          throw new Q(`The Driver Adapter \`${s.adapterName}\`, based on \`${s.provider}\`, is not compatible with the provider \`${l}\` specified in the Prisma schema.`, this._clientVersion); if (n.datasources || n.datasourceUrl !== void 0)
          throw new Q('Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.', this._clientVersion)
      } const a = e.injectableEdgeEnv?.(); try {
        const l = n ?? {}; const d = l.__internal ?? {}; const g = d.debug === !0; g && Y.enable('prisma:client'); let h = cr.resolve(e.dirname, e.relativePath); qi.existsSync(h) || (h = e.dirname), Ne('dirname', e.dirname), Ne('relativePath', e.relativePath), Ne('cwd', h); const v = d.engine || {}; if (l.errorFormat ? this._errorFormat = l.errorFormat : y.env.NODE_ENV === 'production' ? this._errorFormat = 'minimal' : y.env.NO_COLOR ? this._errorFormat = 'colorless' : this._errorFormat = 'colorless', this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = { cwd: h, dirname: e.dirname, enableDebugLogs: g, allowTriggerPanic: v.allowTriggerPanic, prismaPath: v.binaryPath ?? void 0, engineEndpoint: v.endpoint, generator: e.generator, showColors: this._errorFormat === 'pretty', logLevel: l.log && Gs(l.log), logQueries: l.log && !!(typeof l.log == 'string' ? l.log === 'query' : l.log.find(S => typeof S == 'string' ? S === 'query' : S.level === 'query')), env: a?.parsed ?? {}, flags: [], engineWasm: e.engineWasm, compilerWasm: e.compilerWasm, clientVersion: e.clientVersion, engineVersion: e.engineVersion, previewFeatures: this._previewFeatures, activeProvider: e.activeProvider, inlineSchema: e.inlineSchema, overrideDatasources: vs(l, e.datasourceNames), inlineDatasources: e.inlineDatasources, inlineSchemaHash: e.inlineSchemaHash, tracingHelper: this._tracingHelper, transactionOptions: { maxWait: l.transactionOptions?.maxWait ?? 2e3, timeout: l.transactionOptions?.timeout ?? 5e3, isolationLevel: l.transactionOptions?.isolationLevel }, logEmitter: i, isBundled: e.isBundled, adapter: s }, this._accelerateEngineConfig = { ...this._engineConfig, accelerateUtils: { resolveDatasourceUrl: mt, getBatchRequestPayload: Ur, prismaGraphQLToJSError: $r, PrismaClientUnknownRequestError: se, PrismaClientInitializationError: Q, PrismaClientKnownRequestError: oe, debug: Y('prisma:client:accelerateEngine'), engineVersion: oa.version, clientVersion: e.clientVersion } }, Ne('clientVersion', e.clientVersion), this._engine = Os(e, this._engineConfig), this._requestHandler = new zr(this, i), l.log) {
          for (const S of l.log) { const A = typeof S == 'string' ? S : S.emit === 'stdout' ? S.level : null; A && this.$on(A, (R) => { vt.log(`${vt.tags[A] ?? ''}`, R.message || R.query) }) }
        }
      }
      catch (l) { throw l.clientVersion = this._clientVersion, l } return this._appliedParent = $t(this)
    }

    get [Symbol.toStringTag]() { return 'PrismaClient' }$use(n) { this._middlewares.use(n) }$on(n, i) { return n === 'beforeExit' ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i), this }$connect() {
      try { return this._engine.start() }
      catch (n) { throw n.clientVersion = this._clientVersion, n }
    }

    async $disconnect() {
      try { await this._engine.stop() }
      catch (n) { throw n.clientVersion = this._clientVersion, n }
      finally { Li() }
    }

    $executeRawInternal(n, i, o, s) { const a = this._activeProvider; return this._request({ action: 'executeRaw', args: o, transaction: n, clientMethod: i, argsMapper: Kn({ clientMethod: i, activeProvider: a }), callsite: _e(this._errorFormat), dataPath: [], middlewareArgsMapper: s }) }$executeRaw(n, ...i) { return this._createPrismaPromise((o) => { if (n.raw !== void 0 || n.sql !== void 0) { const [s, a] = ia(n, i); return Hn(this._activeProvider, s.text, s.values, Array.isArray(n) ? 'prisma.$executeRaw`<SQL>`' : 'prisma.$executeRaw(sql`<SQL>`)'), this.$executeRawInternal(o, '$executeRaw', s, a) } throw new X('`$executeRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${\'user@email.com\'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\n', { clientVersion: this._clientVersion }) }) }$executeRawUnsafe(n, ...i) { return this._createPrismaPromise(o => (Hn(this._activeProvider, n, i, 'prisma.$executeRawUnsafe(<SQL>, [...values])'), this.$executeRawInternal(o, '$executeRawUnsafe', [n, ...i]))) }$runCommandRaw(n) {
      if (e.activeProvider !== 'mongodb')
        throw new X(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, { clientVersion: this._clientVersion }); return this._createPrismaPromise(i => this._request({ args: n, clientMethod: '$runCommandRaw', dataPath: [], action: 'runCommandRaw', argsMapper: Ds, callsite: _e(this._errorFormat), transaction: i }))
    }

    async $queryRawInternal(n, i, o, s) { const a = this._activeProvider; return this._request({ action: 'queryRaw', args: o, transaction: n, clientMethod: i, argsMapper: Kn({ clientMethod: i, activeProvider: a }), callsite: _e(this._errorFormat), dataPath: [], middlewareArgsMapper: s }) }$queryRaw(n, ...i) {
      return this._createPrismaPromise((o) => {
        if (n.raw !== void 0 || n.sql !== void 0)
          return this.$queryRawInternal(o, '$queryRaw', ...ia(n, i)); throw new X('`$queryRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${\'user@email.com\'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\n', { clientVersion: this._clientVersion })
      })
    }

    $queryRawTyped(n) {
      return this._createPrismaPromise((i) => {
        if (!this._hasPreviewFlag('typedSql'))
          throw new X('`typedSql` preview feature must be enabled in order to access $queryRawTyped API', { clientVersion: this._clientVersion }); return this.$queryRawInternal(i, '$queryRawTyped', n)
      })
    }

    $queryRawUnsafe(n, ...i) { return this._createPrismaPromise(o => this.$queryRawInternal(o, '$queryRawUnsafe', [n, ...i])) }_transactionWithArray({ promises: n, options: i }) {
      const o = fp.nextId(); const s = Vs(n.length); const a = n.map((l, d) => {
        if (l?.[Symbol.toStringTag] !== 'PrismaPromise')
          throw new Error('All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.'); const g = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel; const h = { kind: 'batch', id: o, index: d, isolationLevel: g, lock: s }; return l.requestTransaction?.(h) ?? l
      }); return na(a)
    }

    async _transactionWithCallback({ callback: n, options: i }) {
      const o = { traceparent: this._tracingHelper.getTraceParent() }; const s = { maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait, timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout, isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel }; const a = await this._engine.transaction('start', o, s); let l; try { const d = { kind: 'itx', ...a }; l = await n(this._createItxClient(d)), await this._engine.transaction('commit', o, a) }
      catch (d) { throw await this._engine.transaction('rollback', o, a).catch(() => {}), d } return l
    }

    _createItxClient(n) { return pe($t(pe(as(this), [ee('_appliedParent', () => this._appliedParent._createItxClient(n)), ee('_createPrismaPromise', () => zn(n)), ee(mp, () => n.id)])), [ct(ms)]) }$transaction(n, i) { let o; typeof n == 'function' ? this._engineConfig.adapter?.adapterName === '@prisma/adapter-d1' ? o = () => { throw new Error('Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.') } : o = () => this._transactionWithCallback({ callback: n, options: i }) : o = () => this._transactionWithArray({ promises: n, options: i }); const s = { name: 'transaction', attributes: { method: '$transaction' } }; return this._tracingHelper.runInChildSpan(s, o) }_request(n) {
      n.otelParentCtx = this._tracingHelper.getActiveContext(); const i = n.middlewareArgsMapper ?? pp; const o = { args: i.requestArgsToMiddlewareArgs(n.args), dataPath: n.dataPath, runInTransaction: !!n.transaction, action: n.action, model: n.model }; const s = { middleware: { name: 'middleware', middleware: !0, attributes: { method: '$use' }, active: !1 }, operation: { name: 'operation', attributes: { method: o.action, model: o.model, name: o.model ? `${o.model}.${o.action}` : o.action } } }; let a = -1; const l = async (d) => {
        const g = this._middlewares.get(++a); if (g)
          return this._tracingHelper.runInChildSpan(s.middleware, D => g(d, M => (D?.end(), l(M)))); const { runInTransaction: h, args: v, ...S } = d; const A = { ...n, ...S }; v && (A.args = i.middlewareArgsToRequestArgs(v)), n.transaction !== void 0 && h === !1 && delete A.transaction; const R = await hs(this, A); return A.model ? ps({ result: R, modelName: A.model, args: A.args, extensions: this._extensions, runtimeDataModel: this._runtimeDataModel, globalOmit: this._globalOmit }) : R
      }; return this._tracingHelper.runInChildSpan(s.operation, () => l(o))
    }

    async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: d, transaction: g, unpacker: h, otelParentCtx: v, customDataProxyFetch: S }) {
      try {
        n = d ? d(n) : n; const A = { name: 'serialize' }; const R = this._tracingHelper.runInChildSpan(A, () => In({ modelName: l, runtimeDataModel: this._runtimeDataModel, action: a, args: n, clientMethod: i, callsite: s, extensions: this._extensions, errorFormat: this._errorFormat, clientVersion: this._clientVersion, previewFeatures: this._previewFeatures, globalOmit: this._globalOmit })); return Y.enabled('prisma:client') && (Ne('Prisma Client call:'), Ne(`prisma.${i}(${Yo(n)})`), Ne('Generated request:'), Ne(`${JSON.stringify(R, null, 2)}
`)), g?.kind === 'batch' && await g.lock, this._requestHandler.request({ protocolQuery: R, modelName: l, action: a, clientMethod: i, dataPath: o, callsite: s, args: n, extensions: this._extensions, transaction: g, unpacker: h, otelParentCtx: v, otelChildCtx: this._tracingHelper.getActiveContext(), globalOmit: this._globalOmit, customDataProxyFetch: S })
      }
      catch (A) { throw A.clientVersion = this._clientVersion, A }
    }

    $metrics = new Bt(this); _hasPreviewFlag(n) { return !!this._engineConfig.previewFeatures?.includes(n) }$applyPendingMigrations() { return this._engine.applyPendingMigrations() }$extends = ls
  } return t
} function ia(e, t) { return gp(e) ? [new le(e, t), qs] : [e, Us] } function gp(e) { return Array.isArray(e) && Array.isArray(e.raw) }f(); u(); c(); p(); m(); const hp = new Set(['toJSON', '$$typeof', 'asymmetricMatch', Symbol.iterator, Symbol.toStringTag, Symbol.isConcatSpreadable, Symbol.toPrimitive]); function yp(e) {
  return new Proxy(e, { get(t, r) {
    if (r in t)
      return t[r]; if (!hp.has(r))
      throw new TypeError(`Invalid enum value: ${String(r)}`)
  } })
}f(); u(); c(); p(); m(); const export_warnEnvConflicts = void 0; export { Hu as createParam, Y as Debug, ve as Decimal, ic as defineDmmfProperty, Ct as deserializeJsonResponse, ei as deserializeRawResult, Pr as DMMF, fu as dmmfToRuntimeDataModel, uc as empty, Pi as Extensions, dp as getPrismaClient, qn as getRuntime, lc as join, yp as makeStrictEnum, sc as makeTypedQueryFactory, Bt as MetricsClient, Cn as objectEnumValues, Q as PrismaClientInitializationError, oe as PrismaClientKnownRequestError, Re as PrismaClientRustPanicError, se as PrismaClientUnknownRequestError, X as PrismaClientValidationError, Ti as Public, Wo as raw, In as serializeJsonQuery, Sn as skip, le as Sql, Ho as sqltag, export_warnEnvConflicts as warnEnvConflicts, mr as warnOnce }
// # sourceMappingURL=edge-esm.js.map
